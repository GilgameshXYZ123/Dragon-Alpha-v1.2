/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package winograd.fFx3;

import z.util.math.Sort;
import z.util.math.vector.Vector;

/**
 *
 * @author Gilgamesh
 */
public class Winograd_f14x3_v9 
{
    static float[][] AT = new float[][] {//14 * 16
        { 1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 2.000000e+00f, -2.000000e+00f, 5.000000e-01f, -5.000000e-01f, 3.000000e+00f, -3.000000e+00f, 3.333333e-01f, -3.333333e-01f, 4.000000e+00f, -4.000000e+00f, 2.500000e-01f, -2.500000e-01f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f,  1.000000e+00f, 4.000000e+00f,  4.000000e+00f, 2.500000e-01f,  2.500000e-01f, 9.000000e+00f,  9.000000e+00f, 1.111111e-01f,  1.111111e-01f, 1.600000e+01f,  1.600000e+01f, 6.250000e-02f,  6.250000e-02f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 8.000000e+00f, -8.000000e+00f, 1.250000e-01f, -1.250000e-01f, 2.700000e+01f, -2.700000e+01f, 3.703704e-02f, -3.703704e-02f, 6.400000e+01f, -6.400000e+01f, 1.562500e-02f, -1.562500e-02f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.600000e+01f,  1.600000e+01f, 6.250000e-02f,  6.250000e-02f, 8.100000e+01f,  8.100000e+01f, 1.234568e-02f,  1.234568e-02f, 2.560000e+02f,  2.560000e+02f, 3.906250e-03f,  3.906250e-03f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 3.200000e+01f, -3.200000e+01f, 3.125000e-02f, -3.125000e-02f, 2.430000e+02f, -2.430000e+02f, 4.115226e-03f, -4.115226e-03f, 1.024000e+03f, -1.024000e+03f, 9.765625e-04f, -9.765625e-04f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f,  1.000000e+00f, 6.400000e+01f,  6.400000e+01f, 1.562500e-02f,  1.562500e-02f, 7.290000e+02f,  7.290000e+02f, 1.371742e-03f,  1.371742e-03f, 4.096000e+03f,  4.096000e+03f, 2.441406e-04f,  2.441406e-04f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 1.280000e+02f, -1.280000e+02f, 7.812500e-03f, -7.812500e-03f, 2.187000e+03f, -2.187000e+03f, 4.572474e-04f, -4.572474e-04f, 1.638400e+04f, -1.638400e+04f, 6.103516e-05f, -6.103516e-05f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f,  1.000000e+00f, 2.560000e+02f,  2.560000e+02f, 3.906250e-03f,  3.906250e-03f, 6.561000e+03f,  6.561000e+03f, 1.524158e-04f,  1.524158e-04f, 6.553600e+04f,  6.553600e+04f, 1.525879e-05f,  1.525879e-05f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 5.120000e+02f, -5.120000e+02f, 1.953125e-03f, -1.953125e-03f, 1.968300e+04f, -1.968300e+04f, 5.080526e-05f, -5.080526e-05f, 2.621440e+05f, -2.621440e+05f, 3.814697e-06f, -3.814697e-06f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.024000e+03f,  1.024000e+03f, 9.765625e-04f,  9.765625e-04f, 5.904900e+04f,  5.904900e+04f, 1.693509e-05f,  1.693509e-05f, 1.048576e+06f,  1.048576e+06f, 9.536743e-07f,  9.536743e-07f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 2.048000e+03f, -2.048000e+03f, 4.882812e-04f, -4.882812e-04f, 1.771470e+05f, -1.771470e+05f, 5.645029e-06f, -5.645029e-06f, 4.194304e+06f, -4.194304e+06f, 2.384186e-07f, -2.384186e-07f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f,  1.000000e+00f, 4.096000e+03f,  4.096000e+03f, 2.441406e-04f,  2.441406e-04f, 5.314410e+05f,  5.314410e+05f, 1.881676e-06f,  1.881676e-06f, 1.677722e+07f,  1.677722e+07f, 5.960464e-08f,  5.960464e-08f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 8.192000e+03f, -8.192000e+03f, 1.220703e-04f, -1.220703e-04f, 1.594323e+06f, -1.594323e+06f, 6.272255e-07f, -6.272255e-07f, 6.710886e+07f, -6.710886e+07f, 1.490116e-08f, -1.490116e-08f, 1.000000e+00f,  },
    };
    
    static float[][] G = new float[][] {//16 * 3
        { 1.000000e+00f,   0.000000e+00f,  0.000000e+00f,  },
        { -2.222222e-03f, -2.222222e-03f, -2.222222e-03f,  },
        { -2.222222e-03f,  2.222222e-03f, -2.222222e-03f,  },
        {  1.209373e-05f,  2.418745e-05f,  4.837491e-05f,  },
        {  1.209373e-05f, -2.418745e-05f,  4.837491e-05f,  },
        {  1.981436e-01f,  9.907181e-02f,  4.953590e-02f,  },
        {  1.981436e-01f, -9.907181e-02f,  4.953590e-02f,  },
        { -2.854289e-07f, -8.562866e-07f, -2.568860e-06f,  },
        { -2.854289e-07f,  8.562866e-07f, -2.568860e-06f,  },
        { -1.365197e+00f, -4.550658e-01f, -1.516886e-01f,  },
        { -1.365197e+00f,  4.550658e-01f, -1.516886e-01f,  },
        {  6.218494e-09f,  2.487397e-08f,  9.949590e-08f,  },
        {  6.218494e-09f, -2.487397e-08f,  9.949590e-08f,  },
        {  1.669264e+00f,  4.173160e-01f,  1.043290e-01f,  },
        {  1.669264e+00f, -4.173160e-01f,  1.043290e-01f,  },
        {  0.000000e+00f,  0.000000e+00f,  1.000000e+00f,  },
    };
    
    static float[][] BT = new float[][] {//16 * 16
        { 1.000000e+00f,  0.000000e+00f, -3.042361e+01f,  0.000000e+00f,  2.857587e+02f,  0.000000e+00f, -9.371580e+02f,  0.000000e+00f,  9.371580e+02f,  0.000000e+00f, -2.857587e+02f,  0.000000e+00f,  3.042361e+01f,  0.000000e+00f, -1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  1.000000e+00f,  1.000000e+00f, -2.942361e+01f, -2.942361e+01f,  2.563351e+02f,  2.563351e+02f, -6.808229e+02f, -6.808229e+02f,  2.563351e+02f,  2.563351e+02f, -2.942361e+01f, -2.942361e+01f,  1.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -1.000000e+00f,  1.000000e+00f,  2.942361e+01f, -2.942361e+01f, -2.563351e+02f,  2.563351e+02f,  6.808229e+02f, -6.808229e+02f, -2.563351e+02f,  2.563351e+02f,  2.942361e+01f, -2.942361e+01f, -1.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  5.000000e-01f,  2.500000e-01f, -1.508681e+01f, -7.543403e+00f,  1.391076e+02f,  6.955382e+01f, -4.338021e+02f, -2.169010e+02f,  3.601285e+02f,  1.800642e+02f, -5.284722e+01f, -2.642361e+01f,  2.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -5.000000e-01f,  2.500000e-01f,  1.508681e+01f, -7.543403e+00f, -1.391076e+02f,  6.955382e+01f,  4.338021e+02f, -2.169010e+02f, -3.601285e+02f,  1.800642e+02f,  5.284722e+01f, -2.642361e+01f, -2.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  2.000000e+00f,  4.000000e+00f, -5.284722e+01f, -1.056944e+02f,  3.601285e+02f,  7.202569e+02f, -4.338021e+02f, -8.676042e+02f,  1.391076e+02f,  2.782153e+02f, -1.508681e+01f, -3.017361e+01f,  5.000000e-01f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -2.000000e+00f,  4.000000e+00f,  5.284722e+01f, -1.056944e+02f, -3.601285e+02f,  7.202569e+02f,  4.338021e+02f, -8.676042e+02f, -1.391076e+02f,  2.782153e+02f,  1.508681e+01f, -3.017361e+01f, -5.000000e-01f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  3.333333e-01f,  1.111111e-01f, -1.010417e+01f, -3.368056e+00f,  9.413021e+01f,  3.137674e+01f, -3.019271e+02f, -1.006424e+02f,  2.788385e+02f,  9.294618e+01f, -6.427083e+01f, -2.142361e+01f,  3.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -3.333333e-01f,  1.111111e-01f,  1.010417e+01f, -3.368056e+00f, -9.413021e+01f,  3.137674e+01f,  3.019271e+02f, -1.006424e+02f, -2.788385e+02f,  9.294618e+01f,  6.427083e+01f, -2.142361e+01f, -3.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  3.000000e+00f,  9.000000e+00f, -6.427083e+01f, -1.928125e+02f,  2.788385e+02f,  8.365156e+02f, -3.019271e+02f, -9.057812e+02f,  9.413021e+01f,  2.823906e+02f, -1.010417e+01f, -3.031250e+01f,  3.333333e-01f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -3.000000e+00f,  9.000000e+00f,  6.427083e+01f, -1.928125e+02f, -2.788385e+02f,  8.365156e+02f,  3.019271e+02f, -9.057812e+02f, -9.413021e+01f,  2.823906e+02f,  1.010417e+01f, -3.031250e+01f, -3.333333e-01f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  2.500000e-01f,  6.250000e-02f, -7.590278e+00f, -1.897569e+00f,  7.096528e+01f,  1.774132e+01f, -2.298542e+02f, -5.746354e+01f,  2.199236e+02f,  5.498090e+01f, -5.769444e+01f, -1.442361e+01f,  4.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -2.500000e-01f,  6.250000e-02f,  7.590278e+00f, -1.897569e+00f, -7.096528e+01f,  1.774132e+01f,  2.298542e+02f, -5.746354e+01f, -2.199236e+02f,  5.498090e+01f,  5.769444e+01f, -1.442361e+01f, -4.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  4.000000e+00f,  1.600000e+01f, -5.769444e+01f, -2.307778e+02f,  2.199236e+02f,  8.796944e+02f, -2.298542e+02f, -9.194167e+02f,  7.096528e+01f,  2.838611e+02f, -7.590278e+00f, -3.036111e+01f,  2.500000e-01f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -4.000000e+00f,  1.600000e+01f,  5.769444e+01f, -2.307778e+02f, -2.199236e+02f,  8.796944e+02f,  2.298542e+02f, -9.194167e+02f, -7.096528e+01f,  2.838611e+02f,  7.590278e+00f, -3.036111e+01f, -2.500000e-01f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -1.000000e+00f,  0.000000e+00f,  3.042361e+01f,  0.000000e+00f, -2.857587e+02f,  0.000000e+00f,  9.371580e+02f,  0.000000e+00f, -9.371580e+02f,  0.000000e+00f,  2.857587e+02f,  0.000000e+00f, -3.042361e+01f,  0.000000e+00f, 1.000000e+00f,  },
  
    };
    
    public static float ld(float[][][][] X, int n, int ih, int iw, int ic, int IH, int IW) {
        boolean flag = (ih>=0) && (ih<IH) && (iw>=0) && (iw<IW);
        if(flag) return X[n][ih][iw][ic];
        return 0;
    }
    
    public static void wt(float[][][][] Y, float v, int n, int oh, int ow, int oc, int OW) {
        boolean flag = ow < OW;
        if(flag) Y[n][oh][ow][oc] = v;
    }
    
    public static void matMul(float[][] C, float[][] A, float[][] B) {
        int N = C.length;
        int M = C[0].length;
        int K = A[0].length;
        
        for(int n=0; n<N; n++) 
        for(int m=0; m<M; m++) {
            float v = 0.0f;
            for(int k=0; k<K; k++) 
                v += A[n][k] * B[k][m];
            C[n][m] = v;
        }
    }
    
    public static float[] winograd(
            float[][][][] X, int IH, int IW,
            float[][][][] W, int FH, int FW,//FH = FW = 3
            float[][][][] Y, int OH, int OW,//OH % 2 == 0, OW % 2 == 0
            int N, int IC, int OC,
            int ph, int pw)//sh = sw = 1
    {
        float[] avg = new float[16];
        
        for(int oc=0; oc<OC; oc++)
        for(int n=0; n<N; n++)
        for(int oh=0; oh<OH; oh++)
        for(int ow=0; ow<OW; ow+= 14)
        {
            float  a0 = 0.0f,  a1 = 0.0f,  a2 = 0.0f,  a3 = 0.0f;
            float  a4 = 0.0f,  a5 = 0.0f,  a6 = 0.0f,  a7 = 0.0f;
            float  a8 = 0.0f,  a9 = 0.0f, a10 = 0.0f, a11 = 0.0f;
            float a12 = 0.0f, a13 = 0.0f, a14 = 0.0f, a15 = 0.0f;
            
            for(int fh=0; fh<3; fh++)
            for(int ic=0; ic<IC; ic++)
            {
                float t1, t2;

                //W transform---------------------------------------------------
                float w0 = W[oc][fh][0][ic];
                float w1 = W[oc][fh][1][ic];
                float w2 = W[oc][fh][2][ic];
               
                float g0 = w0;  //1, 0,  0,
                
                //B: g1, g2, g5, g6, g9, g10, g13, g14, 0, 15
                //S: g3, g4, g7, g8, g11, g12, 
                
                t1 = -2.222222e-03f*w0 - 2.222222e-03f*w2;
                t2 = -2.222222e-03f*w1;
                float g1 = t1 + t2, g2 = t1 - t2;

                t1 = 1.2093727E-5f*w0 + 4.8374906E-5f*w2;
                t2 = 2.4187453E-5f*w1;
                float g3 = t1 + t2, g4 = t1 - t2;
                     
                t1 = 0.19814362f*w0 + 0.049535904f*w2;
                t2 = 0.09907181f*w1;
                float g5 = t1 + t2, g6 = t1 - t2;
                
                t1 = -2.8542885E-7f*w0 - 2.5688596E-6f*w2;
                t2 = -8.562866E-7f*w1;
                float g7 = t1 + t2, g8 = t1 - t2;

                t1 = -1.3651974f*w0 - 0.15168859f*w2;
                t2 = -0.4550658f*w1;
                float g9 = t1 + t2, g10 = t1 - t2;

                t1 = 6.2184937E-9f*w0 + 9.94959E-8f*w2;
                t2 = 2.4873975E-8f*w1;
                float g11 = t1 + t2, g12 = t1 - t2;

                t1 = 1.6692642f*w0 + 0.10432901f*w2;
                t2 = 0.41731605f*w1;
                float g13 = t1 + t2, g14 = t1 - t2;
                
                float g15 = w2;
                    
                //X transform---------------------------------------------------
                int ih = oh - ph + fh;
                int iw = ow - pw;
                
                float  x0 = ld(X, n, ih, iw    , ic, IH, IW);
                float  x1 = ld(X, n, ih, iw +  1, ic, IH, IW);
                float  x2 = ld(X, n, ih, iw +  2, ic, IH, IW);
                float  x3 = ld(X, n, ih, iw +  3, ic, IH, IW);
                float  x4 = ld(X, n, ih, iw +  4, ic, IH, IW);
                float  x5 = ld(X, n, ih, iw +  5, ic, IH, IW);
                float  x6 = ld(X, n, ih, iw +  6, ic, IH, IW);
                float  x7 = ld(X, n, ih, iw +  7, ic, IH, IW);
                float  x8 = ld(X, n, ih, iw +  8, ic, IH, IW);
                float  x9 = ld(X, n, ih, iw +  9, ic, IH, IW);
                float x10 = ld(X, n, ih, iw + 10, ic, IH, IW);
                float x11 = ld(X, n, ih, iw + 11, ic, IH, IW);
                float x12 = ld(X, n, ih, iw + 12, ic, IH, IW);
                float x13 = ld(X, n, ih, iw + 13, ic, IH, IW);
                float x14 = ld(X, n, ih, iw + 14, ic, IH, IW);
                float x15 = ld(X, n, ih, iw + 15, ic, IH, IW);
                           
                float d0 = (x0 - x14) + (30.42361f * x12 - 30.42361f*x2) + (285.7587f*x4  - 285.7587f*x10)  + (937.158f*x8 - 937.158f*x6) ;
                
                t1 = (x1 + x13) + (256.3351f*x5  - (29.42361f*x3 + 29.42361f*x11)) + (256.3351f* x9 - 680.8229f*x7);
                t2 = (x2 + x14) + (256.3351f*x6  - (29.42361f*x4 + 29.42361f*x12)) + (256.3351f*x10 - 680.8229f*x8);
                float d1 = t2 + t1, d2 = t2 - t1;
                
                t1 = (0.5f *x1 + 2.0f*x13) + ((139.1076f*x5 - 52.84722f*x11) - 15.08681f*x3) + (360.1285f* x9 - 433.8021f*x7);
                t2 = (0.25f*x2 +      x14) + ((69.55382f*x6 - 26.42361f*x12) - 7.543403f*x4) + (180.0642f*x10 - 216.9010f*x8);
                float d3 = t2 + t1, d4 = t2 - t1;
                
                t1 = (2.0f*x1 + 0.5f*x13) + ((139.1076f*x9  - 52.84722f*x3) - 15.08681f*x11) + (360.1285f*x5 - 433.8021f*x7);
                t2 = (4.0f*x2 +      x14) + ((278.2153f*x10 - 105.6944f*x4) - 30.17361f*x12) + (720.2569f*x6 - 867.6042f*x8);
                float d5 = t2 + t1, d6 = t2 - t1;
                
                t1 = (0.3333333f*x1 + 3.0f*x13) - 10.10417f*x3 + (94.13021f*x5 - 64.27083f*x11) + (278.8385f* x9 - 301.9271f*x7);
                t2 = (0.1111111f*x2 +      x14) - 3.368056f*x4 + (31.37674f*x6 - 21.42361f*x12) + (92.94618f*x10 - 100.6424f*x8) ;
                float d7 = t2 + t1, d8 = t2 - t1;
                
                t1 = 3.0f*x1 - 64.27083f*x3 + 278.8385f*x5 - 301.9271f*x7 + 94.13021f* x9 - 10.10417f*x11 + 0.3333333f * x13;
                t2 = 9.0f*x2 - 192.8125f*x4 + 836.5156f*x6 - 905.7812f*x8 + 282.3906f*x10 - 30.31250f*x12 +              x14;
                float d9 = t2 + t1, d10 = t2 - t1;
                
                t1 = 0.25f  *x1 + ((4.0f*x13 - 7.590278f*x3) - (57.69444f*x11 - 70.96528f*x5)) - (229.8542f*x7 - 219.9236f* x9);
                t2 = 0.0625f*x2 + ((     x14 - 1.897569f*x4) - (14.42361f*x12 - 17.74132f*x6)) - (57.46354f*x8 - 54.98090f*x10);
                float d11 = t2 + t1, d12 = t2 - t1;
               
                t1 =  4.0f*x1 - 7.590278f*x11 - 57.69444f*x3 + 70.96528f* x9 + 219.9236f*x5 - 229.8542f*x7 + 0.25f * x13;
                t2 = 16.0f*x2 - 30.36111f*x12 - 230.7778f*x4 + 283.8611f*x10 + 879.6944f*x6 - 919.4167f*x8  +         x14;
                float d13 = t2 + t1, d14 = t2 - t1;
                        
                float d15 =  (x15 - x1) + (30.42361f*x3  - 30.42361f*x13) + (285.7587f*x11 - 285.7587f*x5) + (937.158f*x7 - 937.158f*x9);
                
                //accumulate----------------------------------------------------
                 a0 +=  g0 *  d0;  a1 +=  g1 *  d1;  a2 +=  g2 *  d2;  a3 +=  g3 *  d3;
                 a4 +=  g4 *  d4;  a5 +=  g5 *  d5;  a6 +=  g6 *  d6;  a7 +=  g7 *  d7;
                 a8 +=  g8 *  d8;  a9 +=  g9 *  d9; a10 += g10 * d10; a11 += g11 * d11;
                a12 += g12 * d12; a13 += g13 * d13; a14 += g14 * d14; a15 += g15 * d15;
            }
            
//            float[] a = new float[]{ a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15 };
//            for(int i=0; i<16; i++) avg[i] += a[i];
            
            //B: g1, g2, g5, g6, g9, g10, g13, g14, 0, 15
            //S: g3, g4, g7, g8, g11, g12, 
            
            float  t1 =  a1 +  a2,  t2 =  a1 -  a2;//big
            float  t3 =  a3 +  a4,  t4 =  a3 -  a4;//small
            float  t5 =  a5 +  a6,  t6 =  a5 -  a6;//big
            float  t7 =  a7 +  a8,  t8 =  a7 -  a8;//small
            float  t9 =  a9 + a10, t10 =  a9 - a10;//big
            float t11 = a11 + a12, t12 = a11 - a12;//small
            float t13 = a13 + a14, t14 = a13 - a14;///big
            
            float[] a = new float[]{ a0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, a15 };
            for(int i=0; i<16; i++) avg[i] += a[i];
            
//            0         1          2          {3         4}         5         6         {7         8}         9          10         {11        12}        13        14        15
//            10.34181, [1.887062, 1.888123], [0.000435, 0.000578], 4.621835, 3.187631, [0.000010, 0.000018], [29.05127, 15.56652], [0.000000, 0.000000], [34.172234, 14.11076], 9.865191
//            5.203218, [1.982641, 2.001414], [0.000196, 0.000348], 0.620431, 0.911438, [0.000005, 0.000010], [9.070077, 2.452883], [0.000000, 0.000000], [12.958122, 1.690518], 4.327029
//            5.377583, [1.937473, 1.968086], [0.000128, 0.000127], 1.556051, 0.324070, [0.000003, 0.000006], [11.79812, 0.402945], [0.000000, 0.000000], [14.993453, 0.067484], 3.632117
//            2.137794, 1.972289, 1.966715, 0.000050, 0.000069, 0.355690, 0.416277, 0.000001, 0.000003, 3.287388, 2.640742, 0.000000, 0.000000, 4.414384, 2.717424, 3.023312
//            0.998085, 1.982800, [0.004750, 0.000258], 0.000062, 0.397004, 0.098054, 0.000008, 0.000003,  2.115103, 0.714286, 0.000000, 0.000000,  2.566576,  2.274646, 5.983367, 
//            1.424985, 1.932308, [0.009134, 0.000195], 0.000042, 0.495033, 0.689800, 0.000006, 0.000002,  0.396285, 0.714286, 0.000000, 0.000000,  0.872594,  4.822934, 4.431463, 
//            5.763350, 2.006046, [0.007359, 0.000372], 0.000035, 2.450045, 1.035525, 0.000010, 0.000002, 12.806599, 0.714286, 0.000000, 0.000000, 13.853629,  9.519010, 5.936517, 
//            8.094841, 1.912861, [0.002552, 0.000331], 0.000031, 3.018120, 0.573648, 0.000010, 0.000002, 17.233721, 0.714286, 0.000000, 0.000000, 18.773474,  7.706300, 6.948341, 
//            3.357965, 1.964703, [0.011157, 0.000022], 0.000063, 0.306415, 0.582249, 0.000001, 0.000002, 3.1870400, 0.714286, 0.000000, 0.000000,  4.245562,  4.471163, 1.587126, 
//            30.84947, 19.20909, [0.048275, 0.001264], 0.000296, 23.31110, 2.354445, 0.000031, 0.000010, 114.65527, 0.714286, 0.000001, 0.000000, 111.818550, 1.405987, 24.25252, 
//            58.05660, 19.99726, [0.013691, 0.002297], 0.000368, 24.47319, 4.804083, 0.000066, 0.000019, 142.75024, 0.714286, 0.000002, 0.000001, 157.742798, 67.59950, 39.31177, 
//            96.02429, 19.08205, [0.021537, 0.003203], 0.000555, 36.33426, 7.417552, 0.000086, 0.000028, 203.32957, 0.714286, 0.000002, 0.000001, 221.110046, 97.05585, 65.12850, 
//            64.02019, 20.00198, [0.115550, 0.002018], 0.000132, 27.15577, 8.985846, 0.000054, 0.000006, 151.57727, 0.714286, 0.000001, 0.000000, 165.294876, 88.86065, 24.51072, 
//            68.67716, 19.21635, [0.066753, 0.002642], 0.000983, 33.14381, 0.953539, 0.000088, 0.000046, 183.39674, 0.714286, 0.000002, 0.000001, 193.363403, 35.93613, 87.20432, 
            

            //0         1         2         3         4         5         6         7         8         9         10        11        12        13        14        15
            //0.246885, 1.959777, 1.968831, 0.000000, 0.000113, 0.435329, 0.801325, 0.000001, 0.000002, 2.476932, 3.861428, 0.000000, 0.000000, 2.956791, 3.642608, 0.135615
            //6.905658, 19.632813, 19.481487, 0.000366, 0.001732, 8.158316, 0.667753, 0.000008, 0.000050, 43.948124, 0.387706, 0.000000, 0.000001, 49.361446, 0.615059, 29.5638837
            //0, 1, 2, 5, 6, 9, 10, 13, 14, 15
            //3, 4, 7, 8, 11, 12,  
            
            //11,7,3,0,5,1,9,13
            float y0 = t11 + t7 + t3 + a0 + t5 + t1 + t9 + t13;
            
            //12,8,4,10,14,6,2
            float y1 = 4.0f*t12 + 3.0f*t8 + 2.0f*t4 + 0.3333333f*t10 + 0.25f*t14 + 0.5f*t6 + t2;
            
            //11,7,3,5,13,9,1
            float y2 = 16.0f*t11 + 9.0f*t7 + 4.0f*t3 + 0.25f*t5 + 0.0625f*t13 + 0.1111111f*t9 + t1;
            
            
            float y3 = (float) (t2 + 8.0 * t4 + 0.125 * t6 + 27.0 * t8 + 0.03703704 * t10 + 64.0 * t12 + 0.015625 * t14);
            float y4 = (float) (t1 + 16.0 * t3 + 0.0625 * t5 + 81.0 * t7 + 0.01234568 * t9 + 256.0 * t11 + 0.00390625 * t13);
            float y5 = (float) (t2 + 32.0 * t4 + 0.03125 * t6 + 243.0 * t8 + 0.004115226 * t10 + 1024.0 * t12 + 9.765625E-4 * t14);
            float y6 = (float) (t1 + 64.0 * t3 + 0.015625 * t5 + 729.0 * t7 + 0.001371742 * t9 + 4096.0 * t11 + 2.441406E-4 * t13);
            float y7 = (float) (t2 + 128.0 * t4 + 0.0078125 * t6 + 2187.0 * t8 + 4.572474E-4 * t10 + 16384.0 * t12 + 6.103516E-5 * t14);
            float y8 = (float) (t1 + 256.0 * t3 + 0.00390625 * t5 + 6561.0 * t7 + 1.524158E-4 * t9 + 65536.0 * t11 + 1.525879E-5 * t13);
            float y9 = (float) (t2 + 512.0 * t4 + 0.001953125 * t6 + 19683.0 * t8 + 5.080526E-5 * t10 + 262144.0 * t12 + 3.814697E-6 * t14);
            float y10 = (float) (t1 + 1024.0 * t3 + 9.765625E-4 * t5 + 59049.0 * t7 + 1.693509E-5 * t9 + 1048576.0 * t11 + 9.536743E-7 * t13);
            float y11 = (float) (t2 + 2048.0 * t4 + 4.882812E-4 * t6 + 177147.0 * t8 + 5.645029E-6 * t10 + 4194304.0 * t12 + 2.384186E-7 * t14);
            float y12 = (float) (t1 + 4096.0 * t3 + 2.441406E-4 * t5 + 531441.0 * t7 + 1.881676E-6 * t9 + 1.677722E7 * t11 + 5.960464E-8 * t13);
            float y13 = (float) (t2 + 8192.0*t4 + 1.220703E-4*t6 + 1594323.0*t8 + 6.272255E-7*t10 + 6.710886E7*t12 + 1.490116E-8*t14 + a15);
            
            wt(Y, y0, n, oh, ow     , oc, OW);
            wt(Y, y1, n, oh, ow +  1, oc, OW);
            wt(Y, y2, n, oh, ow +  2, oc, OW);
            wt(Y, y3, n, oh, ow +  3, oc, OW);
            wt(Y, y4, n, oh, ow +  4, oc, OW);
            wt(Y, y5, n, oh, ow +  5, oc, OW);
            wt(Y, y6, n, oh, ow +  6, oc, OW);//0.5f
            
            wt(Y,  y7, n, oh, ow +  7, oc, OW);
            wt(Y,  y8, n, oh, ow +  8, oc, OW);
            wt(Y,  y9, n, oh, ow +  9, oc, OW);
            wt(Y, y10, n, oh, ow + 10, oc, OW);
            wt(Y, y11, n, oh, ow + 11, oc, OW);
            wt(Y, y12, n, oh, ow + 12, oc, OW);
            wt(Y, y13, n, oh, ow + 13, oc, OW);
        }
        
        for(int i=0; i<16; i++) {
            avg[i] = avg[i] / (N * OH * OW * OC);
            avg[i] = Math.abs(avg[i]);
        }
        
        return avg;
    }
    
    static void println(float[] a, String name) {
        for(int i=0; i<a.length; i++) {
            float v = a[i];
            if(v == 0.0f) continue;
            
            //sign
            if(a[i] >= 0) System.out.print(" + ");
            else System.out.print(" - ");
            
            //value
            float abs = Math.abs(v);
            if(abs != 1.0f) System.out.print(abs + "f * ");
            
            System.out.print(name +  i);
        }
    }
    
    public static void showIdx(double[] K0, float[] A0, Integer[] I0) {
        float[] k = new float[K0.length];
        for (int t = 0; t <K0.length; t++) {
            k[t] = (float) (K0[t] * A0[t]);
        }

        Sort.sort(k, I0);
        Vector.println(k);
        Vector.println(I0);
        System.out.println();
    }
   
    public static double[] getK(double[] K, Integer[] I) {
        double[] k = new double[I.length];
        for(int i=0; i<I.length; i++) k[i] = K[I[i]];
        return k;
    }
    
    public static void main(String[] args){
        //0         1         2         3         4         5         6         7         8         9         10        11        12        13        14        15
        //6.905658, 19.63281, 19.48187, 0.000366, 0.001732, 8.158316, 0.667753, 0.000008, 0.000050, 43.948124, 0.387706, 0.000000, 0.000001, 49.361446, 0.615059, 29.5638837
        double[] K = { 6.905658, 19.63281, 19.48187, 0.000366, 0.001732, 8.158316, 0.667753, 0.000008, 0.000050, 43.948124, 0.387706, 0.000000, 0.000001, 49.361446, 0.615059, 29.5638837 };

        //float y0 = a0 + t1 + t3 + t5 + t7 + t9 + t11 + t13;
        float[] A0 = {1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f};
        Integer[] I0 = {0, 1, 3, 5, 7, 9, 11, 13};
        double[] K0 = {6.905658, 19.632813, 0.000366, 8.158316, 0.000008, 43.948124, 0.000000, 49.361446};
        
        //float y1 = t2 + 2.0f * t4 + 0.5f * t6 + 3.0f * t8 + 0.3333333f * t10 + 4.0f * t12 + 0.25f * t14;
        float[] A1 = {1, 2, 0.5f, 3.0f, 0.3333333f, 4.0f, 0.25f };
        Integer[] I1 = {2, 4, 6, 8, 10, 12, 14 };
        
        //float y2 = t1 + 4.0f * t3 + 0.25f * t5 + 9.0f * t7 + 0.1111111f * t9 + 16.0f * t11 + 0.0625f * t13;
        float[] A2 = { 1, 4, 0.25f, 9.0f, 0.1111111f, 16.0f, 0.0625f };
        Integer[] I2 = {1, 3, 5, 7, 9, 11, 13};
        
        
        showIdx(getK(K, I2), A2, I2);
    }
}
