/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package winograd.fFx3;

/**
 *
 * @author Gilgamesh
 */
public class Winograd_f14x3_v0 
{
    static float[][] AT = new float[][] {//14 * 16
        { 1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 2.000000e+00f, -2.000000e+00f, 5.000000e-01f, -5.000000e-01f, 3.000000e+00f, -3.000000e+00f, 3.333333e-01f, -3.333333e-01f, 4.000000e+00f, -4.000000e+00f, 2.500000e-01f, -2.500000e-01f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f,  1.000000e+00f, 4.000000e+00f,  4.000000e+00f, 2.500000e-01f,  2.500000e-01f, 9.000000e+00f,  9.000000e+00f, 1.111111e-01f,  1.111111e-01f, 1.600000e+01f,  1.600000e+01f, 6.250000e-02f,  6.250000e-02f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 8.000000e+00f, -8.000000e+00f, 1.250000e-01f, -1.250000e-01f, 2.700000e+01f, -2.700000e+01f, 3.703704e-02f, -3.703704e-02f, 6.400000e+01f, -6.400000e+01f, 1.562500e-02f, -1.562500e-02f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.600000e+01f,  1.600000e+01f, 6.250000e-02f,  6.250000e-02f, 8.100000e+01f,  8.100000e+01f, 1.234568e-02f,  1.234568e-02f, 2.560000e+02f,  2.560000e+02f, 3.906250e-03f,  3.906250e-03f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 3.200000e+01f, -3.200000e+01f, 3.125000e-02f, -3.125000e-02f, 2.430000e+02f, -2.430000e+02f, 4.115226e-03f, -4.115226e-03f, 1.024000e+03f, -1.024000e+03f, 9.765625e-04f, -9.765625e-04f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f,  1.000000e+00f, 6.400000e+01f,  6.400000e+01f, 1.562500e-02f,  1.562500e-02f, 7.290000e+02f,  7.290000e+02f, 1.371742e-03f,  1.371742e-03f, 4.096000e+03f,  4.096000e+03f, 2.441406e-04f,  2.441406e-04f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 1.280000e+02f, -1.280000e+02f, 7.812500e-03f, -7.812500e-03f, 2.187000e+03f, -2.187000e+03f, 4.572474e-04f, -4.572474e-04f, 1.638400e+04f, -1.638400e+04f, 6.103516e-05f, -6.103516e-05f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f,  1.000000e+00f, 2.560000e+02f,  2.560000e+02f, 3.906250e-03f,  3.906250e-03f, 6.561000e+03f,  6.561000e+03f, 1.524158e-04f,  1.524158e-04f, 6.553600e+04f,  6.553600e+04f, 1.525879e-05f,  1.525879e-05f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 5.120000e+02f, -5.120000e+02f, 1.953125e-03f, -1.953125e-03f, 1.968300e+04f, -1.968300e+04f, 5.080526e-05f, -5.080526e-05f, 2.621440e+05f, -2.621440e+05f, 3.814697e-06f, -3.814697e-06f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f,  1.000000e+00f, 1.024000e+03f,  1.024000e+03f, 9.765625e-04f,  9.765625e-04f, 5.904900e+04f,  5.904900e+04f, 1.693509e-05f,  1.693509e-05f, 1.048576e+06f,  1.048576e+06f, 9.536743e-07f,  9.536743e-07f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 2.048000e+03f, -2.048000e+03f, 4.882812e-04f, -4.882812e-04f, 1.771470e+05f, -1.771470e+05f, 5.645029e-06f, -5.645029e-06f, 4.194304e+06f, -4.194304e+06f, 2.384186e-07f, -2.384186e-07f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f,  1.000000e+00f, 4.096000e+03f,  4.096000e+03f, 2.441406e-04f,  2.441406e-04f, 5.314410e+05f,  5.314410e+05f, 1.881676e-06f,  1.881676e-06f, 1.677722e+07f,  1.677722e+07f, 5.960464e-08f,  5.960464e-08f, 0.000000e+00f,  },
        { 0.000000e+00f, 1.000000e+00f, -1.000000e+00f, 8.192000e+03f, -8.192000e+03f, 1.220703e-04f, -1.220703e-04f, 1.594323e+06f, -1.594323e+06f, 6.272255e-07f, -6.272255e-07f, 6.710886e+07f, -6.710886e+07f, 1.490116e-08f, -1.490116e-08f, 1.000000e+00f,  },
    };
    
    static float[][] G = new float[][] {//16 * 3
        { 1.000000e+00f,   0.000000e+00f,  0.000000e+00f,  },
        { -2.222222e-03f, -2.222222e-03f, -2.222222e-03f,  },
        { -2.222222e-03f,  2.222222e-03f, -2.222222e-03f,  },
        {  1.209373e-05f,  2.418745e-05f,  4.837491e-05f,  },
        {  1.209373e-05f, -2.418745e-05f,  4.837491e-05f,  },
        {  1.981436e-01f,  9.907181e-02f,  4.953590e-02f,  },
        {  1.981436e-01f, -9.907181e-02f,  4.953590e-02f,  },
        { -2.854289e-07f, -8.562866e-07f, -2.568860e-06f,  },
        { -2.854289e-07f,  8.562866e-07f, -2.568860e-06f,  },
        { -1.365197e+00f, -4.550658e-01f, -1.516886e-01f,  },
        { -1.365197e+00f,  4.550658e-01f, -1.516886e-01f,  },
        {  6.218494e-09f,  2.487397e-08f,  9.949590e-08f,  },
        {  6.218494e-09f, -2.487397e-08f,  9.949590e-08f,  },
        {  1.669264e+00f,  4.173160e-01f,  1.043290e-01f,  },
        {  1.669264e+00f, -4.173160e-01f,  1.043290e-01f,  },
        {  0.000000e+00f,  0.000000e+00f,  1.000000e+00f,  },
    };
    
    static float[][] BT = new float[][] {//16 * 16
        { 1.000000e+00f,  0.000000e+00f, -3.042361e+01f,  0.000000e+00f,  2.857587e+02f,  0.000000e+00f, -9.371580e+02f,  0.000000e+00f,  9.371580e+02f,  0.000000e+00f, -2.857587e+02f,  0.000000e+00f,  3.042361e+01f,  0.000000e+00f, -1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  1.000000e+00f,  1.000000e+00f, -2.942361e+01f, -2.942361e+01f,  2.563351e+02f,  2.563351e+02f, -6.808229e+02f, -6.808229e+02f,  2.563351e+02f,  2.563351e+02f, -2.942361e+01f, -2.942361e+01f,  1.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -1.000000e+00f,  1.000000e+00f,  2.942361e+01f, -2.942361e+01f, -2.563351e+02f,  2.563351e+02f,  6.808229e+02f, -6.808229e+02f, -2.563351e+02f,  2.563351e+02f,  2.942361e+01f, -2.942361e+01f, -1.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  5.000000e-01f,  2.500000e-01f, -1.508681e+01f, -7.543403e+00f,  1.391076e+02f,  6.955382e+01f, -4.338021e+02f, -2.169010e+02f,  3.601285e+02f,  1.800642e+02f, -5.284722e+01f, -2.642361e+01f,  2.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -5.000000e-01f,  2.500000e-01f,  1.508681e+01f, -7.543403e+00f, -1.391076e+02f,  6.955382e+01f,  4.338021e+02f, -2.169010e+02f, -3.601285e+02f,  1.800642e+02f,  5.284722e+01f, -2.642361e+01f, -2.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  2.000000e+00f,  4.000000e+00f, -5.284722e+01f, -1.056944e+02f,  3.601285e+02f,  7.202569e+02f, -4.338021e+02f, -8.676042e+02f,  1.391076e+02f,  2.782153e+02f, -1.508681e+01f, -3.017361e+01f,  5.000000e-01f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -2.000000e+00f,  4.000000e+00f,  5.284722e+01f, -1.056944e+02f, -3.601285e+02f,  7.202569e+02f,  4.338021e+02f, -8.676042e+02f, -1.391076e+02f,  2.782153e+02f,  1.508681e+01f, -3.017361e+01f, -5.000000e-01f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  3.333333e-01f,  1.111111e-01f, -1.010417e+01f, -3.368056e+00f,  9.413021e+01f,  3.137674e+01f, -3.019271e+02f, -1.006424e+02f,  2.788385e+02f,  9.294618e+01f, -6.427083e+01f, -2.142361e+01f,  3.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -3.333333e-01f,  1.111111e-01f,  1.010417e+01f, -3.368056e+00f, -9.413021e+01f,  3.137674e+01f,  3.019271e+02f, -1.006424e+02f, -2.788385e+02f,  9.294618e+01f,  6.427083e+01f, -2.142361e+01f, -3.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  3.000000e+00f,  9.000000e+00f, -6.427083e+01f, -1.928125e+02f,  2.788385e+02f,  8.365156e+02f, -3.019271e+02f, -9.057812e+02f,  9.413021e+01f,  2.823906e+02f, -1.010417e+01f, -3.031250e+01f,  3.333333e-01f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -3.000000e+00f,  9.000000e+00f,  6.427083e+01f, -1.928125e+02f, -2.788385e+02f,  8.365156e+02f,  3.019271e+02f, -9.057812e+02f, -9.413021e+01f,  2.823906e+02f,  1.010417e+01f, -3.031250e+01f, -3.333333e-01f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  2.500000e-01f,  6.250000e-02f, -7.590278e+00f, -1.897569e+00f,  7.096528e+01f,  1.774132e+01f, -2.298542e+02f, -5.746354e+01f,  2.199236e+02f,  5.498090e+01f, -5.769444e+01f, -1.442361e+01f,  4.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -2.500000e-01f,  6.250000e-02f,  7.590278e+00f, -1.897569e+00f, -7.096528e+01f,  1.774132e+01f,  2.298542e+02f, -5.746354e+01f, -2.199236e+02f,  5.498090e+01f,  5.769444e+01f, -1.442361e+01f, -4.000000e+00f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f,  4.000000e+00f,  1.600000e+01f, -5.769444e+01f, -2.307778e+02f,  2.199236e+02f,  8.796944e+02f, -2.298542e+02f, -9.194167e+02f,  7.096528e+01f,  2.838611e+02f, -7.590278e+00f, -3.036111e+01f,  2.500000e-01f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -4.000000e+00f,  1.600000e+01f,  5.769444e+01f, -2.307778e+02f, -2.199236e+02f,  8.796944e+02f,  2.298542e+02f, -9.194167e+02f, -7.096528e+01f,  2.838611e+02f,  7.590278e+00f, -3.036111e+01f, -2.500000e-01f,  1.000000e+00f, 0.000000e+00f,  },
        { 0.000000e+00f, -1.000000e+00f,  0.000000e+00f,  3.042361e+01f,  0.000000e+00f, -2.857587e+02f,  0.000000e+00f,  9.371580e+02f,  0.000000e+00f, -9.371580e+02f,  0.000000e+00f,  2.857587e+02f,  0.000000e+00f, -3.042361e+01f,  0.000000e+00f, 1.000000e+00f,  },
    };
    
    public static float ld(float[][][][] X, int n, int ih, int iw, int ic, int IH, int IW) {
        boolean flag = (ih>=0) && (ih<IH) && (iw>=0) && (iw<IW);
        if(flag) return X[n][ih][iw][ic];
        return 0;
    }
    
    public static void wt(float[][][][] Y, float v, int n, int oh, int ow, int oc, int OW) {
        boolean flag = ow < OW;
        if(flag) Y[n][oh][ow][oc] = v;
    }
    
    public static void matMul(float[][] C, float[][] A, float[][] B) {
        int N = C.length;
        int M = C[0].length;
        int K = A[0].length;
        
        for(int n=0; n<N; n++) 
        for(int m=0; m<M; m++) {
            float v = 0.0f;
            for(int k=0; k<K; k++) 
                v += A[n][k] * B[k][m];
            C[n][m] = v;
        }
    }
    
    public static void winograd(
            float[][][][] X, int IH, int IW,
            float[][][][] W, int FH, int FW,//FH = FW = 3
            float[][][][] Y, int OH, int OW,//OH % 2 == 0, OW % 2 == 0
            int N, int IC, int OC,
            int ph, int pw)//sh = sw = 1
    {
        for(int oc=0; oc<OC; oc++)
        for(int n=0; n<N; n++)
        for(int oh=0; oh<OH; oh++)
        for(int ow=0; ow<OW; ow+= 14)
        {
            float[][] a = new float[16][1]; //AT*((G*g)(BT*d)) = AT * accu
            for(int fh=0; fh<3; fh++)
            for(int ic=0; ic<IC; ic++)
            {
                //W transform---------------------------------------------------
                float[][] w = new float[3][1];
                for(int t=0; t<3; t++) w[t][0] = W[oc][fh][t][ic];

                float[][] g = new float[16][1];
                matMul(g, G, w);//G*w: W(3) -> G(16)
                
                //X transform---------------------------------------------------
                int ih = oh - ph + fh;
                int iw = ow - pw;
                
                float[][] x = new float[16][1];
                for(int t=0; t<16; t++) x[t][0] = ld(X, n, ih, iw + t, ic, IH, IW);
                
                float[][] d = new float[16][1];
                matMul(d, BT, x);//BT*x: X(16) -> D(16)
                
                //accumulate----------------------------------------------------
                for(int t=0; t<16; t++) 
                    a[t][0] += g[t][0] * d[t][0];
            }
            
            float[][] y = new float[14][1];
            matMul(y, AT, a);//AT * accu: accu(16) -> Y(14)
            for(int t=0; t<14; t++) 
                wt(Y, y[t][0], n, oh, ow + t, oc, OW);
        }
    }
}
