#pragma once

#ifndef MICRO_WINOGRAD_F6X3_H
#define MICRO_WINOGRAD_F6X3_H

//======{ Filtrer-Transform: W(3) -> G(8) }==========
//[   1,       0,    0]
//[-2/9,    -2/9, -2/9]
//[-2/9,     2/9, -2/9]
//[1/90,    1/45, 2/45]
//[1/90,   -1/45, 2/45]
//[32/45,  16/45, 8/45]
//[32/45, -16/45, 8/45]
//[   0,     0,      1]
#define winograd_f6x3_g(g, w) {\
	g[0] = w[0];\
	g[1] = -0.2222222f * (w[0] + w[1] + w[2]);\
	g[2] = -0.2222222f * (w[0] - w[1] + w[2]);\
	g[3] = 0.01111111f*w[0] + 0.02222222f*w[1] + 0.04444444f*w[2];\
	g[4] = 0.01111111f*w[0] - 0.02222222f*w[1] + 0.04444444f*w[2];\
	g[5] = 0.7111111f*w[0] + 0.35555556f*w[1] + 0.1777778f*w[2];\
	g[6] = 0.7111111f*w[0] - 0.35555556f*w[1] + 0.1777778f*w[2];\
	g[7] = w[2];}

//optimized: with less multiplication (18 -> 9)
#define winograd_f6x3_G(g, w0, w1, w2) {\
	float t1, t2;\
	g[0] = w0;\
	t1 = -0.2222222f*w0 - 0.2222222f*w2;  t2 = -0.2222222f*w1; \
	g[1] = t1 + t2; g[2] = t1 - t2;\
	t1 = 0.01111111f*w0 + 0.04444444f*w2; t2 =  0.02222222f*w1;\
	g[3] = t1 + t2; g[4] = t1 - t2;\
	t1 = 0.7111111f *w0 + 0.1777778f* w2; t2 =  0.3555556f *w1;\
	g[5] = t1 + t2; g[6] = t1 - t2;\
	g[7] = w2;}



//======{ Input-Transform: X[8] -> D[8] }==========
//[1,  0  , -21/4,    0 ,  21/4,  0   , -1, 0]
//[0,  1  ,  1   , -17/4, -17/4,  1   ,  1, 0]
//[0, -1  ,  1   ,  17/4, -17/4, -1   ,  1, 0]
//[0,  1/2,  1/4 , -5/2 , -5/4 ,  2   ,  1, 0]
//[0, -1/2,  1/4 ,  5/2 , -5/4 , -2   ,  1, 0]
//[0,  2  ,  4   , -5/2 , -5   ,  1/2 ,  1, 0]
//[0, -2  ,  4   ,  5/2 , -5   , -1/2 ,  1, 0]
//[0, -1  ,  0   ,  21/4,  0   , -21/4,  0, 1]
#define winograd_f6x3_d(d, x) {\
	d[0] =  x[0]      - 5.25f*x[2]              + 5.25f*x[4]             - x[6];\
	d[1] =       x[1] +       x[2] - 4.25f*x[3] - 4.25f*x[4]      + x[5] + x[6];\
	d[2] =      -x[1] +       x[2] + 4.25f*x[3] - 4.25f*x[4]      - x[5] + x[6];\
	d[3] =  0.5f*x[1] + 0.25f*x[2] -  2.5f*x[3] - 1.25f*x[4]    + 2*x[5] + x[6];\
	d[4] = -0.5f*x[1] + 0.25f*x[2] +  2.5f*x[3] - 1.25f*x[4]    - 2*x[5] + x[6];\
	d[5] =  2.0f*x[1] +  4.0f*x[2] -  2.5f*x[3] - 5.0f*x[4] +  0.5f*x[5] + x[6];\
	d[6] = -2.0f*x[1] +  4.0f*x[2] +  2.5f*x[3] - 5.0f*x[4] -  0.5f*x[5] + x[6];\
	d[7] =      -x[1] +              5.25f*x[3]             - 5.25f*x[5]         + x[7];}

//optimized: with less multiplication
#define winograd_f6x3_D(d, x) {\
	d[0] =  x[0] - 5.25f*x[2] + 5.25f*x[4] - x[6];\
	d[7] = -x[1] + 5.25f*x[3] - 5.25f*x[5] + x[7];\
	float t1, t2;\
	t1 = x[1] - 4.25f*x[3] + x[5];\
	t2 = x[2] - 4.25f*x[4] + x[6];\
	d[1] = t1 + t2; d[2] = t2 - t1;\
	t1 = 0.50f*x[1] - 2.50f*x[3] + 2.0f*x[5];\
	t2 = 0.25f*x[2] - 1.25f*x[4] +      x[6];\
	d[3] = t1 + t2; d[4] = t2 - t1;\
	t1 = 2.0f*x[1] - 2.5f*x[3] + 0.5f*x[5];\
	t2 = 4.0f*x[2] - 5.0f*x[4] +      x[6];\
	d[5] = t1 + t2; d[6] = t2 - t1;}



//======{ Ouput-Transform: A[8] -> Y[6] }==========
//[1  1   1   1    1    1        1   0]
//[0  1  -1   2   -2   1/2    -1/2   0]
//[0  1   1   4    4   1/4     1/4   0]
//[0  1  -1   8   -8   1/8    -1/8   0]
//[0  1   1  16   16   1/16   1/16   0]
//[0  1  -1  32  -32   1/32  -1/32   1]
#define winograd_f6x3_y(y, a) {\
	y[0] = a[0] + a[1] + a[2] +         a[3] +         a[4] +          a[5] +          a[6];\
	y[1] =        a[1] - a[2] +  2.0f * a[3] -  2.0f * a[4] + 0.5f    *a[5] - 0.5f    *a[6];\
	y[2] =        a[1] + a[2] +  4.0f * a[3] +  4.0f * a[4] + 0.25f   *a[5] + 0.25f   *a[6];\
	y[3] =        a[1] - a[2] +  8.0f * a[3] -  8.0f * a[4] + 0.125f  *a[5] - 0.125f  *a[6];\
	y[4] =        a[1] + a[2] + 16.0f * a[3] + 16.0f * a[4] + 0.0625f *a[5] + 0.0625f *a[6];\
	y[5] =        a[1] - a[2] + 32.0f * a[3] - 32.0f * a[4] + 0.03125f*a[5] - 0.03125f*a[6] + a[7];}

//optimized: with less multiplications
#define winograd_f6x3_Y(y, a) {\
	float t0 = a[1] + a[2], t1 = a[1] - a[2];\
	float t2 = a[3] + a[4], t3 = a[3] - a[4];\
	float t4 = a[5] + a[6], t5 = a[5] - a[6];\
	y[0] = a[0] + t0 +       t2 +          t4;\
	y[1] =        t1 +  2.0f*t3 + 0.5f    *t5;\
	y[2] =        t0 +  4.0f*t2 + 0.25f   *t4;\
	y[3] =        t1 +  8.0f*t3 + 0.125f  *t5;\
	y[4] =        t0 + 16.0f*t2 + 0.0625f *t4;\
	y[5] =        t1 + 32.0f*t3 + 0.03125f*t5 + a[7];}

//optimized: with less multiplications
//for vector type
#define winograd_f6x3_Y_vec(y, a, elem) {\
	float t0 = a[1].elem + a[2].elem, t1 = a[1].elem - a[2].elem;\
	float t2 = a[3].elem + a[4].elem, t3 = a[3].elem - a[4].elem;\
	float t4 = a[5].elem + a[6].elem, t5 = a[5].elem - a[6].elem;\
	y[0] = a[0].elem + t0 +       t2 +          t4;\
	y[1] =             t1 +  2.0f*t3 + 0.5f    *t5;\
	y[2] =             t0 +  4.0f*t2 + 0.25f   *t4;\
	y[3] =             t1 +  8.0f*t3 + 0.125f  *t5;\
	y[4] =             t0 + 16.0f*t2 + 0.0625f *t4;\
	y[5] =             t1 + 32.0f*t3 + 0.03125f*t5 + a[7].elem;}

#endif