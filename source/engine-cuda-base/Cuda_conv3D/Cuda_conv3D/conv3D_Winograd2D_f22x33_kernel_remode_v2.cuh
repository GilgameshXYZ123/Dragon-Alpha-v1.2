#pragma once

#ifndef CONV_3D_WINOGRAD_2D_F22X33_KERNEL_REMODE_V2_H
#define CONV_3D_WINOGRAD_2D_F22X33_KERNEL_REMODE_V2_H

//Winograd2D Filter transformation:
//W[OC, 3, 3, IC] -> CW[IC, 4, 4, OC]
//(OC, IC) % 4 == 0
#ifndef CONV_3D_WINOGRAD_2D_KERNEL_REMODE_V2_CALL
#define CONV_3D_WINOGRAD_2D_KERNEL_REMODE_V2_CALL

//LB = log2(BLOCK_SIZE)

//======[normal method (1*1)]==========================================
//lengthv = OC * IC
#define conv3D_winograd2d_f22x33_kremode_v2_k1_small(stream, W, G, lengthv, IC, OC)\
	conv3D_winograd2D_f22x33_kernel_remode_v2_kernel_1\
		<<< 1, ((lengthv + 3)>>2), 0, stream >>>\
			(W, G, lengthv, IC, OC)

#define conv3D_winograd2d_f22x33_kremode_v2_k1(stream, LB, LT, W, G, lengthv, IC, OC)\
	conv3D_winograd2D_f22x33_kernel_remode_v2_kernel_1\
		<<< (lengthv>>LB>>LT), (1<<LB), 0, stream >>>\
			(W, G, lengthv, IC, OC)

//======[optimized method (2*2)]=======================================
//LT-unit: 2 * 2 = 4 elements
//lengthv = (OC >> 1) * (IC >> 1)

#define conv3D_winograd2d_f22x33_kremode_v2_k2x2(stream, LB, LT, W, G, IC, OC)\
	conv3D_winograd2D_f22x33_kernel_remode_v2_kernel_2x2\
		<<< ((OC * IC)>>2>>LB>>LT), (1<<LB), 0, stream >>>\
			(W, G, IC, OC)

//======[optimized method (2*4)]=======================================
//LT-unit: 2 * 4 = 4 elements
//lengthv = (OC >> 2) * (IC >> 1)

#define conv3D_winograd2d_f22x33_kremode_v2_k2x4(stream, LB, LT, W, G, IC, OC)\
	conv3D_winograd2D_f22x33_kernel_remode_v2_kernel_2x4\
		<<< ((OC * IC)>>3>>LB>>LT), (1<<LB), 0, stream >>>\
			(W, G, IC, OC)

//LTY >= 2, LTX >= 1
#define conv3D_winograd2d_f22x33_kremode_v2_k2x4A(stream, LBY, LBX, LTY, LTX, W, G, IC, OC)\
	conv3D_winograd2D_f22x33_kernel_remode_v2_kernel_2x4_A\
		<<< dim3((IC>>LBX>>LTX), (OC>>LBY>>LTY)), dim3(1<<LBX, 1<<LBY), 0, stream >>>\
			(W, G, IC, OC)

#endif


//======[normal method (1*1)]==========================================
#ifndef CONV_3D_WINOGRAD_2D_F22X33_KERNEL_REMODE_V2_KERNEL_1X1
#define CONV_3D_WINOGRAD_2D_F22X33_KERNEL_REMODE_V2_KERNEL_1X1

__global__ void conv3D_winograd2D_f22x33_kernel_remode_v2_kernel_1(
	const float* __restrict__ W,//FH = FW = 3
	      float* __restrict__ G,//FH = FW = 4
	int lengthv, int IC, int OC)
{
	int step = gridDim.x*blockDim.x;
	int index = blockIdx.x*blockDim.x + threadIdx.x;

	const int IC9 = IC * 9;
	for (; index < lengthv; index += step)
	{
		const int oc = index / IC, ic = index % IC;//index = (oc, ic)

		const int W00 = oc * IC9 + ic, W01 = W00 + IC, W02 = W01 + IC;//[oc, 0, 0-2, ic]
		const int W10 = W02 + IC, W11 = W10 + IC, W12 = W11 + IC;     //[oc, 1, 0-2, ic]  
		const int W20 = W12 + IC, W21 = W20 + IC, W22 = W21 + IC;     //[oc, 2, 0-2, ic]

		float w00 = W[W00], w01 = W[W01], w02 = W[W02];
		float w10 = W[W10], w11 = W[W11], w12 = W[W12];
		float w20 = W[W20], w21 = W[W21], w22 = W[W22];

		//transform---------------------------------------------------------------------------------
		float b00 = w00, b10 = 0.5f * (w00 + w10 + w20), b20 = 0.5f * (w00 - w10 + w20), b30 = w20;
		float b01 = w01, b11 = 0.5f * (w01 + w11 + w21), b21 = 0.5f * (w01 - w11 + w21), b31 = w21;
		float b02 = w02, b12 = 0.5f * (w02 + w12 + w22), b22 = 0.5f * (w02 - w12 + w22), b32 = w22;

		float g00 = b00, g01 = 0.5f * (b00 + b01 + b02), g02 = 0.5f * (b00 - b01 + b02), g03 = b02;
		float g10 = b10, g11 = 0.5f * (b10 + b11 + b12), g12 = 0.5f * (b10 - b11 + b12), g13 = b12;
		float g20 = b20, g21 = 0.5f * (b20 + b21 + b22), g22 = 0.5f * (b20 - b21 + b22), g23 = b22;
		float g30 = b30, g31 = 0.5f * (b30 + b31 + b32), g32 = 0.5f * (b30 - b31 + b32), g33 = b32;
		//transform---------------------------------------------------------------------------------

		//[IC, 4, 4, OC]
		const int G00 = (ic << 4)*OC + oc, G01 = G00 + OC, G02 = G00 + (OC << 1), G03 = G00 + OC * 3;
		const int G10 = G00 + (OC << 2)  , G11 = G10 + OC, G12 = G10 + (OC << 1), G13 = G10 + OC * 3;
		const int G20 = G10 + (OC << 2)  , G21 = G20 + OC, G22 = G20 + (OC << 1), G23 = G20 + OC * 3;
		const int G30 = G20 + (OC << 2)  , G31 = G30 + OC, G32 = G30 + (OC << 1), G33 = G30 + OC * 3;
		G[G00] = g00; G[G01] = g01; G[G02] = g02; G[G03] = g03; 
		G[G10] = g10; G[G11] = g11; G[G12] = g12; G[G13] = g13;
		G[G20] = g20; G[G21] = g21; G[G22] = g22; G[G23] = g23;
		G[G30] = g30; G[G31] = g31; G[G32] = g32; G[G33] = g33;
	}
}

#endif


//======[(IC x OC) method (2*2)]=======================================
#ifndef CONV_3D_WINOGRAD_2D_F22X33_KERNEL_REMODE_V2_KERNEL_2X2
#define CONV_3D_WINOGRAD_2D_F22X33_KERNEL_REMODE_V2_KERNEL_2X2

__global__ void conv3D_winograd2D_f22x33_kernel_remode_v2_kernel_2x2(
	const float* __restrict__ W,//FH = FW = 3
	      float* __restrict__ G,//FH = FW = 4
	int IC, int OC)
{
	int step = gridDim.x*blockDim.x;
	int index = blockIdx.x*blockDim.x + threadIdx.x;
	
	const int OC2 = (OC >> 1), lengthv = OC2 * (IC >> 1);
	for (; index < lengthv; index += step)
	{
		const int ic = index / OC2, oc = index - ic * OC2;
		const int oc0 = oc << 1, oc1 = oc0 + 1;
		const int ic0 = ic << 1, ic1 = ic0 + 1;

		//======={ read (3*3) * (2*2) elements from W[OC, 3, 3, IC] }=============================================================
		float w00[4], w01[4], w02[4];//(3 * 3) elements
		float w10[4], w11[4], w12[4];
		float w20[4], w21[4], w22[4]; {
			int Wa00 = (oc0 * 9) * IC + ic0, Wa01 = Wa00 + IC, Wa02 = Wa00 + (IC << 1);//oc0
			int Wa10 = Wa00 + (IC * 3), Wa11 = Wa10 + IC, Wa12 = Wa10 + (IC << 1);
			int Wa20 = Wa10 + (IC * 3), Wa21 = Wa20 + IC, Wa22 = Wa20 + (IC << 1);

			//oc0, {ic0, ic1}
			*(float2*)(w00) = *(float2*)(W + Wa00); *(float2*)(w01) = *(float2*)(W + Wa01); *(float2*)(w02) = *(float2*)(W + Wa02);
			*(float2*)(w10) = *(float2*)(W + Wa10); *(float2*)(w11) = *(float2*)(W + Wa11); *(float2*)(w12) = *(float2*)(W + Wa12);
			*(float2*)(w20) = *(float2*)(W + Wa20); *(float2*)(w21) = *(float2*)(W + Wa21); *(float2*)(w22) = *(float2*)(W + Wa22);

			int Wb00 = (oc1 * 9) * IC + ic0, Wb01 = Wb00 + IC, Wb02 = Wb00 + (IC << 1);//oc1
			int Wb10 = Wb00 + (IC * 3), Wb11 = Wb10 + IC, Wb12 = Wb10 + (IC << 1);
			int Wb20 = Wb10 + (IC * 3), Wb21 = Wb20 + IC, Wb22 = Wb20 + (IC << 1);

			 //oc1, {ic0, ic1}
			 *(float2*)(w00 + 2) = *(float2*)(W + Wb00); *(float2*)(w01 + 2) = *(float2*)(W + Wb01); *(float2*)(w02 + 2) = *(float2*)(W + Wb02);
			 *(float2*)(w10 + 2) = *(float2*)(W + Wb10); *(float2*)(w11 + 2) = *(float2*)(W + Wb11); *(float2*)(w12 + 2) = *(float2*)(W + Wb12);
			 *(float2*)(w20 + 2) = *(float2*)(W + Wb20); *(float2*)(w21 + 2) = *(float2*)(W + Wb21); *(float2*)(w22 + 2) = *(float2*)(W + Wb22);
		}

		//======={ transform W(3*3) -> G(4*4) }===================================================================================
		float b00[4], b01[4], b02[4];//(4 * 3) elements
		float b10[4], b11[4], b12[4];
		float b20[4], b21[4], b22[4];
		float b30[4], b31[4], b32[4]; {
			//{oc0, ic0}
			b00[0] = w00[0]; b10[0] = 0.5f * (w00[0] + w10[0] + w20[0]); b20[0] = 0.5f * (w00[0] - w10[0] + w20[0]); b30[0] = w20[0];
			b01[0] = w01[0]; b11[0] = 0.5f * (w01[0] + w11[0] + w21[0]); b21[0] = 0.5f * (w01[0] - w11[0] + w21[0]); b31[0] = w21[0];
			b02[0] = w02[0]; b12[0] = 0.5f * (w02[0] + w12[0] + w22[0]); b22[0] = 0.5f * (w02[0] - w12[0] + w22[0]); b32[0] = w22[0];

			//{oc0, ic1}
			b00[1] = w00[1]; b10[1] = 0.5f * (w00[1] + w10[1] + w20[1]); b20[1] = 0.5f * (w00[1] - w10[1] + w20[1]); b30[1] = w20[1];
			b01[1] = w01[1]; b11[1] = 0.5f * (w01[1] + w11[1] + w21[1]); b21[1] = 0.5f * (w01[1] - w11[1] + w21[1]); b31[1] = w21[1];
			b02[1] = w02[1]; b12[1] = 0.5f * (w02[1] + w12[1] + w22[1]); b22[1] = 0.5f * (w02[1] - w12[1] + w22[1]); b32[1] = w22[1];

			//{oc1, ic0}
			b00[2] = w00[2]; b10[2] = 0.5f * (w00[2] + w10[2] + w20[2]); b20[2] = 0.5f * (w00[2] - w10[2] + w20[2]); b30[2] = w20[2];
			b01[2] = w01[2]; b11[2] = 0.5f * (w01[2] + w11[2] + w21[2]); b21[2] = 0.5f * (w01[2] - w11[2] + w21[2]); b31[2] = w21[2];
			b02[2] = w02[2]; b12[2] = 0.5f * (w02[2] + w12[2] + w22[2]); b22[2] = 0.5f * (w02[2] - w12[2] + w22[2]); b32[2] = w22[2];

			//{oc1, ic1}
			b00[3] = w00[3]; b10[3] = 0.5f * (w00[3] + w10[3] + w20[3]); b20[3] = 0.5f * (w00[3] - w10[3] + w20[3]); b30[3] = w20[3];
			b01[3] = w01[3]; b11[3] = 0.5f * (w01[3] + w11[3] + w21[3]); b21[3] = 0.5f * (w01[3] - w11[3] + w21[3]); b31[3] = w21[3];
			b02[3] = w02[3]; b12[3] = 0.5f * (w02[3] + w12[3] + w22[3]); b22[3] = 0.5f * (w02[3] - w12[3] + w22[3]); b32[3] = w22[3];
		}

		//======={ write (4*4) * (2*3) elements to G[IC, 4, 4, OC] }==============================================================
		float g00[2], g01[2], g02[2], g03[2];//(4 * 4) elements
		float g10[2], g11[2], g12[2], g13[2];
		float g20[2], g21[2], g22[2], g23[2];
		float g30[2], g31[2], g32[2], g33[2];
		//G[IC, 4, 4, OC]: ic0, group1
		{
			//{oc0, ic0}
			g00[0] = b00[0]; g01[0] = 0.5f * (b00[0] + b01[0] + b02[0]); g02[0] = 0.5f * (b00[0] - b01[0] + b02[0]); g03[0] = b02[0];
			g10[0] = b10[0]; g11[0] = 0.5f * (b10[0] + b11[0] + b12[0]); g12[0] = 0.5f * (b10[0] - b11[0] + b12[0]); g13[0] = b12[0];
			g20[0] = b20[0]; g21[0] = 0.5f * (b20[0] + b21[0] + b22[0]); g22[0] = 0.5f * (b20[0] - b21[0] + b22[0]); g23[0] = b22[0];
			g30[0] = b30[0]; g31[0] = 0.5f * (b30[0] + b31[0] + b32[0]); g32[0] = 0.5f * (b30[0] - b31[0] + b32[0]); g33[0] = b32[0];

			//{oc1, ic0}
			g00[1] = b00[2]; g01[1] = 0.5f * (b00[2] + b01[2] + b02[2]); g02[1] = 0.5f * (b00[2] - b01[2] + b02[2]); g03[1] = b02[2];
			g10[1] = b10[2]; g11[1] = 0.5f * (b10[2] + b11[2] + b12[2]); g12[1] = 0.5f * (b10[2] - b11[2] + b12[2]); g13[1] = b12[2];
			g20[1] = b20[2]; g21[1] = 0.5f * (b20[2] + b21[2] + b22[2]); g22[1] = 0.5f * (b20[2] - b21[2] + b22[2]); g23[1] = b22[2];
			g30[1] = b30[2]; g31[1] = 0.5f * (b30[2] + b31[2] + b32[2]); g32[1] = 0.5f * (b30[2] - b31[2] + b32[2]); g33[1] = b32[2];

			int G00 = (ic0 << 4) * OC + oc0, G01 = G00 + OC, G02 = G00 + (OC << 1), G03 = G00 + OC * 3;//{oc0, oc1}
			int G10 = G00 + (OC << 2), G11 = G10 + OC, G12 = G10 + (OC << 1), G13 = G10 + OC * 3;
			int G20 = G10 + (OC << 2), G21 = G20 + OC, G22 = G20 + (OC << 1), G23 = G20 + OC * 3;
			int G30 = G20 + (OC << 2), G31 = G30 + OC, G32 = G30 + (OC << 1), G33 = G30 + OC * 3;

			*(float2*)(G + G00) = *(float2*)(g00); *(float2*)(G + G01) = *(float2*)(g01);//(0, 0) -> (0, 3)
			*(float2*)(G + G02) = *(float2*)(g02); *(float2*)(G + G03) = *(float2*)(g03);
			*(float2*)(G + G10) = *(float2*)(g10); *(float2*)(G + G11) = *(float2*)(g11);//(1, 0) -> (1, 3)
			*(float2*)(G + G12) = *(float2*)(g12); *(float2*)(G + G13) = *(float2*)(g13);
			*(float2*)(G + G20) = *(float2*)(g20); *(float2*)(G + G21) = *(float2*)(g21);//(2, 0) -> (2, 3)
			*(float2*)(G + G22) = *(float2*)(g22); *(float2*)(G + G23) = *(float2*)(g23);
			*(float2*)(G + G30) = *(float2*)(g30); *(float2*)(G + G31) = *(float2*)(g31);//(3, 0) -> (3, 3)
			*(float2*)(G + G32) = *(float2*)(g32); *(float2*)(G + G33) = *(float2*)(g33);
		}

		//G[IC, 4, 4, OC]: ic1, groupg2
		{
			//{oc0, ic1}
			g00[0] = b00[1]; g01[0] = 0.5f * (b00[1] + b01[1] + b02[1]); g02[0] = 0.5f * (b00[1] - b01[1] + b02[1]); g03[0] = b02[1];
			g10[0] = b10[1]; g11[0] = 0.5f * (b10[1] + b11[1] + b12[1]); g12[0] = 0.5f * (b10[1] - b11[1] + b12[1]); g13[0] = b12[1];
			g20[0] = b20[1]; g21[0] = 0.5f * (b20[1] + b21[1] + b22[1]); g22[0] = 0.5f * (b20[1] - b21[1] + b22[1]); g23[0] = b22[1];
			g30[0] = b30[1]; g31[0] = 0.5f * (b30[1] + b31[1] + b32[1]); g32[0] = 0.5f * (b30[1] - b31[1] + b32[1]); g33[0] = b32[1];

			//{oc1, ic1}
			g00[1] = b00[3]; g01[1] = 0.5f * (b00[3] + b01[3] + b02[3]); g02[1] = 0.5f * (b00[3] - b01[3] + b02[3]); g03[1] = b02[3];
			g10[1] = b10[3]; g11[1] = 0.5f * (b10[3] + b11[3] + b12[3]); g12[1] = 0.5f * (b10[3] - b11[3] + b12[3]); g13[1] = b12[3];
			g20[1] = b20[3]; g21[1] = 0.5f * (b20[3] + b21[3] + b22[3]); g22[1] = 0.5f * (b20[3] - b21[3] + b22[3]); g23[1] = b22[3];
			g30[1] = b30[3]; g31[1] = 0.5f * (b30[3] + b31[3] + b32[3]); g32[1] = 0.5f * (b30[3] - b31[3] + b32[3]); g33[1] = b32[3];

			int G00 = (ic1 << 4) * OC + oc0, G01 = G00 + OC, G02 = G00 + (OC << 1), G03 = G00 + OC * 3;//{ }
			int G10 = G00 + (OC << 2), G11 = G10 + OC, G12 = G10 + (OC << 1), G13 = G10 + OC * 3;
			int G20 = G10 + (OC << 2), G21 = G20 + OC, G22 = G20 + (OC << 1), G23 = G20 + OC * 3;
			int G30 = G20 + (OC << 2), G31 = G30 + OC, G32 = G30 + (OC << 1), G33 = G30 + OC * 3;

			//ic0, {oc0, oc1}
			*(float2*)(G + G00) = *(float2*)(g00); *(float2*)(G + G01) = *(float2*)(g01);//(0, 0) -> (0, 3)
			*(float2*)(G + G02) = *(float2*)(g02); *(float2*)(G + G03) = *(float2*)(g03);
			*(float2*)(G + G10) = *(float2*)(g10); *(float2*)(G + G11) = *(float2*)(g11);//(1, 0) -> (1, 3)
			*(float2*)(G + G12) = *(float2*)(g12); *(float2*)(G + G13) = *(float2*)(g13);
			*(float2*)(G + G20) = *(float2*)(g20); *(float2*)(G + G21) = *(float2*)(g21);//(2, 0) -> (2, 3)
			*(float2*)(G + G22) = *(float2*)(g22); *(float2*)(G + G23) = *(float2*)(g23);
			*(float2*)(G + G30) = *(float2*)(g30); *(float2*)(G + G31) = *(float2*)(g31);//(3, 0) -> (3, 3)
			*(float2*)(G + G32) = *(float2*)(g32); *(float2*)(G + G33) = *(float2*)(g33);
		}
	}
}

#endif


//======[optimized method (2*4)]=======================================
#ifndef CONV_3D_WINOGRAD_2D_F22X33_KERNEL_REMODE_V2_KERNEL_2X4
#define CONV_3D_WINOGRAD_2D_F22X33_KERNEL_REMODE_V2_KERNEL_2X4

//[OC, FH, FW, IC] = [128, 3, 3, 128]:  48.381 GB/s
//[OC, FH, FW, IC] = [256, 3, 3, 256]: 134.079 GB/s
//[OC, FH, FW, IC] = [512, 3, 3, 512]: 200.541 GB/s

__global__ void conv3D_winograd2D_f22x33_kernel_remode_v2_kernel_2x4(
	const float* __restrict__ W,//FH = FW = 3
	      float* __restrict__ G,//FH = FW = 4
	int IC, int OC)
{
	int step = gridDim.x*blockDim.x;
	int index = blockIdx.x*blockDim.x + threadIdx.x;

	const int OC4 = (OC >> 2), lengthv = OC4 * (IC >> 1);
	for (; index < lengthv; index += step)
	{
		const int ic = index / OC4, oc = index - ic * OC4;
		const int oc0 = oc << 2, oc1 = oc0 + 1, oc2 = oc0 + 2, oc3 = oc0 + 3;
		const int ic0 = ic << 1, ic1 = ic0 + 1;

		//======={ read (3*3) * (2*2) elements from W[OC, 3, 3, IC] }=============================================================
		float w00[8], w01[8], w02[8];//(3 * 3) elements
		float w10[8], w11[8], w12[8];
		float w20[8], w21[8], w22[8]; 

		float b00[8], b01[8], b02[8];//(4 * 3) elements
		float b10[8], b11[8], b12[8];
		float b20[8], b21[8], b22[8];
		float b30[8], b31[8], b32[8];{
			//====={ oc0, (ic0, ic1) }=============================================================================================
			const int Wa00 = (oc0 * 9) * IC + ic0, Wa01 = Wa00 + IC, Wa02 = Wa00 + (IC << 1);
			const int Wa10 = Wa00 + (IC * 3)     , Wa11 = Wa10 + IC, Wa12 = Wa10 + (IC << 1);
			const int Wa20 = Wa00 + (IC * 6)     , Wa21 = Wa20 + IC, Wa22 = Wa20 + (IC << 1);
			*(float2*)(w00) = *(float2*)(W + Wa00); *(float2*)(w01) = *(float2*)(W + Wa01); *(float2*)(w02) = *(float2*)(W + Wa02);
			*(float2*)(w10) = *(float2*)(W + Wa10); *(float2*)(w11) = *(float2*)(W + Wa11); *(float2*)(w12) = *(float2*)(W + Wa12);
			*(float2*)(w20) = *(float2*)(W + Wa20); *(float2*)(w21) = *(float2*)(W + Wa21); *(float2*)(w22) = *(float2*)(W + Wa22);

			b00[0] = w00[0]; b10[0] = 0.5f * (w00[0] + w10[0] + w20[0]); b20[0] = 0.5f * (w00[0] - w10[0] + w20[0]); b30[0] = w20[0];//{oc0, ic0}
			b01[0] = w01[0]; b11[0] = 0.5f * (w01[0] + w11[0] + w21[0]); b21[0] = 0.5f * (w01[0] - w11[0] + w21[0]); b31[0] = w21[0];
			b02[0] = w02[0]; b12[0] = 0.5f * (w02[0] + w12[0] + w22[0]); b22[0] = 0.5f * (w02[0] - w12[0] + w22[0]); b32[0] = w22[0];

			b00[1] = w00[1]; b10[1] = 0.5f * (w00[1] + w10[1] + w20[1]); b20[1] = 0.5f * (w00[1] - w10[1] + w20[1]); b30[1] = w20[1];//{oc0, ic1}
			b01[1] = w01[1]; b11[1] = 0.5f * (w01[1] + w11[1] + w21[1]); b21[1] = 0.5f * (w01[1] - w11[1] + w21[1]); b31[1] = w21[1];
			b02[1] = w02[1]; b12[1] = 0.5f * (w02[1] + w12[1] + w22[1]); b22[1] = 0.5f * (w02[1] - w12[1] + w22[1]); b32[1] = w22[1];

			//====={ oc1, (ic0, ic1) }=============================================================================================
			const int Wb00 = (oc1 * 9) * IC + ic0, Wb01 = Wb00 + IC, Wb02 = Wb00 + (IC << 1);
			const int Wb10 = Wb00 + (IC * 3)     , Wb11 = Wb10 + IC, Wb12 = Wb10 + (IC << 1);
			const int Wb20 = Wb00 + (IC * 6)     , Wb21 = Wb20 + IC, Wb22 = Wb20 + (IC << 1);
			*(float2*)(w00 + 2) = *(float2*)(W + Wb00); *(float2*)(w01 + 2) = *(float2*)(W + Wb01); *(float2*)(w02 + 2) = *(float2*)(W + Wb02);
			*(float2*)(w10 + 2) = *(float2*)(W + Wb10); *(float2*)(w11 + 2) = *(float2*)(W + Wb11); *(float2*)(w12 + 2) = *(float2*)(W + Wb12);
			*(float2*)(w20 + 2) = *(float2*)(W + Wb20); *(float2*)(w21 + 2) = *(float2*)(W + Wb21); *(float2*)(w22 + 2) = *(float2*)(W + Wb22);

			b00[2] = w00[2]; b10[2] = 0.5f * (w00[2] + w10[2] + w20[2]); b20[2] = 0.5f * (w00[2] - w10[2] + w20[2]); b30[2] = w20[2];//{oc1, ic0}
			b01[2] = w01[2]; b11[2] = 0.5f * (w01[2] + w11[2] + w21[2]); b21[2] = 0.5f * (w01[2] - w11[2] + w21[2]); b31[2] = w21[2];
			b02[2] = w02[2]; b12[2] = 0.5f * (w02[2] + w12[2] + w22[2]); b22[2] = 0.5f * (w02[2] - w12[2] + w22[2]); b32[2] = w22[2];

			b00[3] = w00[3]; b10[3] = 0.5f * (w00[3] + w10[3] + w20[3]); b20[3] = 0.5f * (w00[3] - w10[3] + w20[3]); b30[3] = w20[3];//{oc1, ic1}
			b01[3] = w01[3]; b11[3] = 0.5f * (w01[3] + w11[3] + w21[3]); b21[3] = 0.5f * (w01[3] - w11[3] + w21[3]); b31[3] = w21[3];
			b02[3] = w02[3]; b12[3] = 0.5f * (w02[3] + w12[3] + w22[3]); b22[3] = 0.5f * (w02[3] - w12[3] + w22[3]); b32[3] = w22[3];

			//====={ oc2, (ic0, ic1) }=============================================================================================
			const int Wc00 = (oc2 * 9) * IC + ic0, Wc01 = Wc00 + IC, Wc02 = Wc00 + (IC << 1);
			const int Wc10 = Wc00 + (IC * 3)     , Wc11 = Wc10 + IC, Wc12 = Wc10 + (IC << 1);
			const int Wc20 = Wc00 + (IC * 6)     , Wc21 = Wc20 + IC, Wc22 = Wc20 + (IC << 1);
			*(float2*)(w00 + 4) = *(float2*)(W + Wc00); *(float2*)(w01 + 4) = *(float2*)(W + Wc01); *(float2*)(w02 + 4) = *(float2*)(W + Wc02);
			*(float2*)(w10 + 4) = *(float2*)(W + Wc10); *(float2*)(w11 + 4) = *(float2*)(W + Wc11); *(float2*)(w12 + 4) = *(float2*)(W + Wc12);
			*(float2*)(w20 + 4) = *(float2*)(W + Wc20); *(float2*)(w21 + 4) = *(float2*)(W + Wc21); *(float2*)(w22 + 4) = *(float2*)(W + Wc22);

			b00[4] = w00[4]; b10[4] = 0.5f * (w00[4] + w10[4] + w20[4]); b20[4] = 0.5f * (w00[4] - w10[4] + w20[4]); b30[4] = w20[4];//{oc2, ic0}
			b01[4] = w01[4]; b11[4] = 0.5f * (w01[4] + w11[4] + w21[4]); b21[4] = 0.5f * (w01[4] - w11[4] + w21[4]); b31[4] = w21[4];
			b02[4] = w02[4]; b12[4] = 0.5f * (w02[4] + w12[4] + w22[4]); b22[4] = 0.5f * (w02[4] - w12[4] + w22[4]); b32[4] = w22[4];

			b00[5] = w00[5]; b10[5] = 0.5f * (w00[5] + w10[5] + w20[5]); b20[5] = 0.5f * (w00[5] - w10[5] + w20[5]); b30[5] = w20[5];//{oc2, ic1}
			b01[5] = w01[5]; b11[5] = 0.5f * (w01[5] + w11[5] + w21[5]); b21[5] = 0.5f * (w01[5] - w11[5] + w21[5]); b31[5] = w21[5];
			b02[5] = w02[5]; b12[5] = 0.5f * (w02[5] + w12[5] + w22[5]); b22[5] = 0.5f * (w02[5] - w12[5] + w22[5]); b32[5] = w22[5];

			//====={ oc3, (ic0, ic1) }=============================================================================================
			const int Wd00 = (oc3 * 9) * IC + ic0, Wd01 = Wd00 + IC, Wd02 = Wd00 + (IC << 1);//oc1, {ic0, ic1}
			const int Wd10 = Wd00 + (IC * 3)     , Wd11 = Wd10 + IC, Wd12 = Wd10 + (IC << 1);
			const int Wd20 = Wd00 + (IC * 6)     , Wd21 = Wd20 + IC, Wd22 = Wd20 + (IC << 1);
			*(float2*)(w00 + 6) = *(float2*)(W + Wd00); *(float2*)(w01 + 6) = *(float2*)(W + Wd01); *(float2*)(w02 + 6) = *(float2*)(W + Wd02);
			*(float2*)(w10 + 6) = *(float2*)(W + Wd10); *(float2*)(w11 + 6) = *(float2*)(W + Wd11); *(float2*)(w12 + 6) = *(float2*)(W + Wd12);
			*(float2*)(w20 + 6) = *(float2*)(W + Wd20); *(float2*)(w21 + 6) = *(float2*)(W + Wd21); *(float2*)(w22 + 6) = *(float2*)(W + Wd22);

			b00[6] = w00[6]; b10[6] = 0.5f * (w00[6] + w10[6] + w20[6]); b20[6] = 0.5f * (w00[6] - w10[6] + w20[6]); b30[6] = w20[6];//{oc3, ic0}
			b01[6] = w01[6]; b11[6] = 0.5f * (w01[6] + w11[6] + w21[6]); b21[6] = 0.5f * (w01[6] - w11[6] + w21[6]); b31[6] = w21[6];
			b02[6] = w02[6]; b12[6] = 0.5f * (w02[6] + w12[6] + w22[6]); b22[6] = 0.5f * (w02[6] - w12[6] + w22[6]); b32[6] = w22[6];
		}

		//======={ write (4*4) * (2*3) elements to G[IC, 4, 4, OC] }==============================================================
		float g00[4], g01[4], g02[4], g03[4];//(4 * 4) elements
		float g10[4], g11[4], g12[4], g13[4];
		float g20[4], g21[4], g22[4], g23[4];
		float g30[4], g31[4], g32[4], g33[4];
		//G[IC, 4, 4, OC]: ic0, group1
		{
			g00[0] = b00[0]; g01[0] = 0.5f * (b00[0] + b01[0] + b02[0]); g02[0] = 0.5f * (b00[0] - b01[0] + b02[0]); g03[0] = b02[0];//{oc0, ic0}
			g10[0] = b10[0]; g11[0] = 0.5f * (b10[0] + b11[0] + b12[0]); g12[0] = 0.5f * (b10[0] - b11[0] + b12[0]); g13[0] = b12[0];
			g20[0] = b20[0]; g21[0] = 0.5f * (b20[0] + b21[0] + b22[0]); g22[0] = 0.5f * (b20[0] - b21[0] + b22[0]); g23[0] = b22[0];
			g30[0] = b30[0]; g31[0] = 0.5f * (b30[0] + b31[0] + b32[0]); g32[0] = 0.5f * (b30[0] - b31[0] + b32[0]); g33[0] = b32[0];
			
			g00[1] = b00[2]; g01[1] = 0.5f * (b00[2] + b01[2] + b02[2]); g02[1] = 0.5f * (b00[2] - b01[2] + b02[2]); g03[1] = b02[2];//{oc1, ic0}
			g10[1] = b10[2]; g11[1] = 0.5f * (b10[2] + b11[2] + b12[2]); g12[1] = 0.5f * (b10[2] - b11[2] + b12[2]); g13[1] = b12[2];
			g20[1] = b20[2]; g21[1] = 0.5f * (b20[2] + b21[2] + b22[2]); g22[1] = 0.5f * (b20[2] - b21[2] + b22[2]); g23[1] = b22[2];
			g30[1] = b30[2]; g31[1] = 0.5f * (b30[2] + b31[2] + b32[2]); g32[1] = 0.5f * (b30[2] - b31[2] + b32[2]); g33[1] = b32[2];

			g00[2] = b00[4]; g01[2] = 0.5f * (b00[4] + b01[4] + b02[4]); g02[2] = 0.5f * (b00[4] - b01[4] + b02[4]); g03[2] = b02[4];//{oc2, ic0}
			g10[2] = b10[4]; g11[2] = 0.5f * (b10[4] + b11[4] + b12[4]); g12[2] = 0.5f * (b10[4] - b11[4] + b12[4]); g13[2] = b12[4];
			g20[2] = b20[4]; g21[2] = 0.5f * (b20[4] + b21[4] + b22[4]); g22[2] = 0.5f * (b20[4] - b21[4] + b22[4]); g23[2] = b22[4];
			g30[2] = b30[4]; g31[2] = 0.5f * (b30[4] + b31[4] + b32[4]); g32[2] = 0.5f * (b30[4] - b31[4] + b32[4]); g33[2] = b32[4];

			g00[3] = b00[6]; g01[3] = 0.5f * (b00[6] + b01[6] + b02[6]); g02[3] = 0.5f * (b00[6] - b01[6] + b02[6]); g03[3] = b02[6];//{oc3, ic0}
			g10[3] = b10[6]; g11[3] = 0.5f * (b10[6] + b11[6] + b12[6]); g12[3] = 0.5f * (b10[6] - b11[6] + b12[6]); g13[3] = b12[6];
			g20[3] = b20[6]; g21[3] = 0.5f * (b20[6] + b21[6] + b22[6]); g22[3] = 0.5f * (b20[6] - b21[6] + b22[6]); g23[3] = b22[6];
			g30[3] = b30[6]; g31[3] = 0.5f * (b30[6] + b31[6] + b32[6]); g32[3] = 0.5f * (b30[6] - b31[6] + b32[6]); g33[3] = b32[6];

			const int G00 = (ic0 << 4) * OC + oc0, G01 = G00 + OC, G02 = G00 + (OC << 1), G03 = G00 + OC * 3;//{oc0, oc1}
			const int G10 = G00 + (OC << 2), G11 = G10 + OC, G12 = G10 + (OC << 1), G13 = G10 + OC * 3;
			const int G20 = G10 + (OC << 2), G21 = G20 + OC, G22 = G20 + (OC << 1), G23 = G20 + OC * 3;
			const int G30 = G20 + (OC << 2), G31 = G30 + OC, G32 = G30 + (OC << 1), G33 = G30 + OC * 3;

			*(float4*)(G + G00) = *(float4*)(g00); *(float4*)(G + G01) = *(float4*)(g01);//(0, 0) -> (0, 3)
			*(float4*)(G + G02) = *(float4*)(g02); *(float4*)(G + G03) = *(float4*)(g03);
			*(float4*)(G + G10) = *(float4*)(g10); *(float4*)(G + G11) = *(float4*)(g11);//(1, 0) -> (1, 3)
			*(float4*)(G + G12) = *(float4*)(g12); *(float4*)(G + G13) = *(float4*)(g13);
			*(float4*)(G + G20) = *(float4*)(g20); *(float4*)(G + G21) = *(float4*)(g21);//(2, 0) -> (2, 3)
			*(float4*)(G + G22) = *(float4*)(g22); *(float4*)(G + G23) = *(float4*)(g23);
			*(float4*)(G + G30) = *(float4*)(g30); *(float4*)(G + G31) = *(float4*)(g31);//(3, 0) -> (3, 3)
			*(float4*)(G + G32) = *(float4*)(g32); *(float4*)(G + G33) = *(float4*)(g33);
		}

		//G[IC, 4, 4, OC]: ic1, groupg2
		{
			b00[7] = w00[7]; b10[7] = 0.5f * (w00[7] + w10[7] + w20[7]); b20[7] = 0.5f * (w00[7] - w10[7] + w20[7]); b30[7] = w20[7];//{oc3, ic1}
			b01[7] = w01[7]; b11[7] = 0.5f * (w01[7] + w11[7] + w21[7]); b21[7] = 0.5f * (w01[7] - w11[7] + w21[7]); b31[7] = w21[7];
			b02[7] = w02[7]; b12[7] = 0.5f * (w02[7] + w12[7] + w22[7]); b22[7] = 0.5f * (w02[7] - w12[7] + w22[7]); b32[7] = w22[7];

			g00[0] = b00[1]; g01[0] = 0.5f * (b00[1] + b01[1] + b02[1]); g02[0] = 0.5f * (b00[1] - b01[1] + b02[1]); g03[0] = b02[1];//{oc0, ic1}
			g10[0] = b10[1]; g11[0] = 0.5f * (b10[1] + b11[1] + b12[1]); g12[0] = 0.5f * (b10[1] - b11[1] + b12[1]); g13[0] = b12[1];
			g20[0] = b20[1]; g21[0] = 0.5f * (b20[1] + b21[1] + b22[1]); g22[0] = 0.5f * (b20[1] - b21[1] + b22[1]); g23[0] = b22[1];
			g30[0] = b30[1]; g31[0] = 0.5f * (b30[1] + b31[1] + b32[1]); g32[0] = 0.5f * (b30[1] - b31[1] + b32[1]); g33[0] = b32[1];
			
			g00[1] = b00[3]; g01[1] = 0.5f * (b00[3] + b01[3] + b02[3]); g02[1] = 0.5f * (b00[3] - b01[3] + b02[3]); g03[1] = b02[3];//{oc1, ic1}
			g10[1] = b10[3]; g11[1] = 0.5f * (b10[3] + b11[3] + b12[3]); g12[1] = 0.5f * (b10[3] - b11[3] + b12[3]); g13[1] = b12[3];
			g20[1] = b20[3]; g21[1] = 0.5f * (b20[3] + b21[3] + b22[3]); g22[1] = 0.5f * (b20[3] - b21[3] + b22[3]); g23[1] = b22[3];
			g30[1] = b30[3]; g31[1] = 0.5f * (b30[3] + b31[3] + b32[3]); g32[1] = 0.5f * (b30[3] - b31[3] + b32[3]); g33[1] = b32[3];

			g00[2] = b00[5]; g01[2] = 0.5f * (b00[5] + b01[5] + b02[5]); g02[2] = 0.5f * (b00[5] - b01[5] + b02[5]); g03[2] = b02[5];//{oc2, ic1}
			g10[2] = b10[5]; g11[2] = 0.5f * (b10[5] + b11[5] + b12[5]); g12[2] = 0.5f * (b10[5] - b11[5] + b12[5]); g13[2] = b12[5];
			g20[2] = b20[5]; g21[2] = 0.5f * (b20[5] + b21[5] + b22[5]); g22[2] = 0.5f * (b20[5] - b21[5] + b22[5]); g23[2] = b22[5];
			g30[2] = b30[5]; g31[2] = 0.5f * (b30[5] + b31[5] + b32[5]); g32[2] = 0.5f * (b30[5] - b31[5] + b32[5]); g33[2] = b32[5];

			g00[3] = b00[7]; g01[3] = 0.5f * (b00[7] + b01[7] + b02[7]); g02[3] = 0.5f * (b00[7] - b01[7] + b02[7]); g03[3] = b02[7];//{oc3, ic1}
			g10[3] = b10[7]; g11[3] = 0.5f * (b10[7] + b11[7] + b12[7]); g12[3] = 0.5f * (b10[7] - b11[7] + b12[7]); g13[3] = b12[7];
			g20[3] = b20[7]; g21[3] = 0.5f * (b20[7] + b21[7] + b22[7]); g22[3] = 0.5f * (b20[7] - b21[7] + b22[7]); g23[3] = b22[7];
			g30[3] = b30[7]; g31[3] = 0.5f * (b30[7] + b31[7] + b32[7]); g32[3] = 0.5f * (b30[7] - b31[7] + b32[7]); g33[3] = b32[7];

			const int G00 = (ic1 << 4) * OC + oc0, G01 = G00 + OC, G02 = G00 + (OC << 1), G03 = G00 + OC * 3;//{ }
			const int G10 = G00 + (OC << 2), G11 = G10 + OC, G12 = G10 + (OC << 1), G13 = G10 + OC * 3;
			const int G20 = G10 + (OC << 2), G21 = G20 + OC, G22 = G20 + (OC << 1), G23 = G20 + OC * 3;
			const int G30 = G20 + (OC << 2), G31 = G30 + OC, G32 = G30 + (OC << 1), G33 = G30 + OC * 3;

			//ic0, {oc0, oc1}
			*(float4*)(G + G00) = *(float4*)(g00); *(float4*)(G + G01) = *(float4*)(g01);//(0, 0) -> (0, 3)
			*(float4*)(G + G02) = *(float4*)(g02); *(float4*)(G + G03) = *(float4*)(g03);
			*(float4*)(G + G10) = *(float4*)(g10); *(float4*)(G + G11) = *(float4*)(g11);//(1, 0) -> (1, 3)
			*(float4*)(G + G12) = *(float4*)(g12); *(float4*)(G + G13) = *(float4*)(g13);
			*(float4*)(G + G20) = *(float4*)(g20); *(float4*)(G + G21) = *(float4*)(g21);//(2, 0) -> (2, 3)
			*(float4*)(G + G22) = *(float4*)(g22); *(float4*)(G + G23) = *(float4*)(g23);
			*(float4*)(G + G30) = *(float4*)(g30); *(float4*)(G + G31) = *(float4*)(g31);//(3, 0) -> (3, 3)
			*(float4*)(G + G32) = *(float4*)(g32); *(float4*)(G + G33) = *(float4*)(g33);
		}
	}
}

#endif


#ifndef CONV_3D_WINOGRAD_2D_F22X33_KERNEL_REMODE_V2_KERNEL_2X4_A
#define CONV_3D_WINOGRAD_2D_F22X33_KERNEL_REMODE_V2_KERNEL_2X4_A

//[OC, FH, FW, IC] = [128, 3, 3, 128]:  54.105 GB/s
//[OC, FH, FW, IC] = [256, 3, 3, 256]: 144.897 GB/s
//[OC, FH, FW, IC] = [512, 3, 3, 512]: 233.939 GB/s

__global__ void conv3D_winograd2D_f22x33_kernel_remode_v2_kernel_2x4_A(
	const float* __restrict__ W,//FH = FW = 3
	      float* __restrict__ G,//FH = FW = 4
	int IC, int OC)
{
	const int y = (blockIdx.y * blockDim.y) + threadIdx.y;
	const int x = (blockIdx.x * blockDim.x) + threadIdx.x;

	const int stepY = blockDim.y * gridDim.y, stepY4 = stepY << 2;
	const int stepX = blockDim.x * gridDim.x, stepX2 = stepX << 1;
	
	for (int y4 = y << 2; y4 < OC; y4 += stepY4)//OC / 4
	for (int x2 = x << 1; x2 < IC; x2 += stepX2)//IC / 2
	{
		const int oc0 = y4, oc1 = oc0 + 1, oc2 = oc0 + 2, oc3 = oc0 + 3;
		const int ic0 = x2, ic1 = ic0 + 1;

		//======={ read (3*3) * (2*2) elements from W[OC, 3, 3, IC] }=============================================================
		float b00[8], b01[8], b02[8];//(4 * 3) elements
		float b10[8], b11[8], b12[8];
		float b20[8], b21[8], b22[8];
		float b30[8], b31[8], b32[8];{
			//====={ oc0, (ic0, ic1) }=============================================================================================
			float w00[2], w01[2], w02[2];//(3 * 3) elements
			float w10[2], w11[2], w12[2];
			float w20[2], w21[2], w22[2];

			const int Wa00 = (oc0 * 9) * IC + ic0, Wa01 = Wa00 + IC, Wa02 = Wa00 + (IC << 1);
			const int Wa10 = Wa00 + (IC * 3)     , Wa11 = Wa10 + IC, Wa12 = Wa10 + (IC << 1);
			const int Wa20 = Wa00 + (IC * 6)     , Wa21 = Wa20 + IC, Wa22 = Wa20 + (IC << 1);
			*(float2*)(w00) = *(float2*)(W + Wa00); *(float2*)(w01) = *(float2*)(W + Wa01); *(float2*)(w02) = *(float2*)(W + Wa02);
			*(float2*)(w10) = *(float2*)(W + Wa10); *(float2*)(w11) = *(float2*)(W + Wa11); *(float2*)(w12) = *(float2*)(W + Wa12);
			*(float2*)(w20) = *(float2*)(W + Wa20); *(float2*)(w21) = *(float2*)(W + Wa21); *(float2*)(w22) = *(float2*)(W + Wa22);

			b00[0] = w00[0]; b10[0] = 0.5f * (w00[0] + w10[0] + w20[0]); b20[0] = 0.5f * (w00[0] - w10[0] + w20[0]); b30[0] = w20[0];//{oc0, ic0}
			b01[0] = w01[0]; b11[0] = 0.5f * (w01[0] + w11[0] + w21[0]); b21[0] = 0.5f * (w01[0] - w11[0] + w21[0]); b31[0] = w21[0];
			b02[0] = w02[0]; b12[0] = 0.5f * (w02[0] + w12[0] + w22[0]); b22[0] = 0.5f * (w02[0] - w12[0] + w22[0]); b32[0] = w22[0];

			b00[1] = w00[1]; b10[1] = 0.5f * (w00[1] + w10[1] + w20[1]); b20[1] = 0.5f * (w00[1] - w10[1] + w20[1]); b30[1] = w20[1];//{oc0, ic1}
			b01[1] = w01[1]; b11[1] = 0.5f * (w01[1] + w11[1] + w21[1]); b21[1] = 0.5f * (w01[1] - w11[1] + w21[1]); b31[1] = w21[1];
			b02[1] = w02[1]; b12[1] = 0.5f * (w02[1] + w12[1] + w22[1]); b22[1] = 0.5f * (w02[1] - w12[1] + w22[1]); b32[1] = w22[1];

			//====={ oc1, (ic0, ic1) }=============================================================================================
			const int Wb00 = (oc1 * 9) * IC + ic0, Wb01 = Wb00 + IC, Wb02 = Wb00 + (IC << 1);
			const int Wb10 = Wb00 + (IC * 3)     , Wb11 = Wb10 + IC, Wb12 = Wb10 + (IC << 1);
			const int Wb20 = Wb00 + (IC * 6)     , Wb21 = Wb20 + IC, Wb22 = Wb20 + (IC << 1);
			*(float2*)(w00) = *(float2*)(W + Wb00); *(float2*)(w01) = *(float2*)(W + Wb01); *(float2*)(w02) = *(float2*)(W + Wb02);
			*(float2*)(w10) = *(float2*)(W + Wb10); *(float2*)(w11) = *(float2*)(W + Wb11); *(float2*)(w12) = *(float2*)(W + Wb12);
			*(float2*)(w20) = *(float2*)(W + Wb20); *(float2*)(w21) = *(float2*)(W + Wb21); *(float2*)(w22) = *(float2*)(W + Wb22);

			b00[2] = w00[0]; b10[2] = 0.5f * (w00[0] + w10[0] + w20[0]); b20[2] = 0.5f * (w00[0] - w10[0] + w20[0]); b30[2] = w20[0];//{oc1, ic0}
			b01[2] = w01[0]; b11[2] = 0.5f * (w01[0] + w11[0] + w21[0]); b21[2] = 0.5f * (w01[0] - w11[0] + w21[0]); b31[2] = w21[0];
			b02[2] = w02[0]; b12[2] = 0.5f * (w02[0] + w12[0] + w22[0]); b22[2] = 0.5f * (w02[0] - w12[0] + w22[0]); b32[2] = w22[0];

			b00[3] = w00[1]; b10[3] = 0.5f * (w00[1] + w10[1] + w20[1]); b20[3] = 0.5f * (w00[1] - w10[1] + w20[1]); b30[3] = w20[1];//{oc1, ic1}
			b01[3] = w01[1]; b11[3] = 0.5f * (w01[1] + w11[1] + w21[1]); b21[3] = 0.5f * (w01[1] - w11[1] + w21[1]); b31[3] = w21[1];
			b02[3] = w02[1]; b12[3] = 0.5f * (w02[1] + w12[1] + w22[1]); b22[3] = 0.5f * (w02[1] - w12[1] + w22[1]); b32[3] = w22[1];

			//====={ oc2, (ic0, ic1) }=============================================================================================
			const int Wc00 = (oc2 * 9) * IC + ic0, Wc01 = Wc00 + IC, Wc02 = Wc00 + (IC << 1);
			const int Wc10 = Wc00 + (IC * 3)     , Wc11 = Wc10 + IC, Wc12 = Wc10 + (IC << 1);
			const int Wc20 = Wc00 + (IC * 6)     , Wc21 = Wc20 + IC, Wc22 = Wc20 + (IC << 1);
			*(float2*)(w00) = *(float2*)(W + Wc00); *(float2*)(w01) = *(float2*)(W + Wc01); *(float2*)(w02) = *(float2*)(W + Wc02);
			*(float2*)(w10) = *(float2*)(W + Wc10); *(float2*)(w11) = *(float2*)(W + Wc11); *(float2*)(w12) = *(float2*)(W + Wc12);
			*(float2*)(w20) = *(float2*)(W + Wc20); *(float2*)(w21) = *(float2*)(W + Wc21); *(float2*)(w22) = *(float2*)(W + Wc22);

			b00[4] = w00[0]; b10[4] = 0.5f * (w00[0] + w10[0] + w20[0]); b20[4] = 0.5f * (w00[0] - w10[0] + w20[0]); b30[4] = w20[0];//{oc2, ic0}
			b01[4] = w01[0]; b11[4] = 0.5f * (w01[0] + w11[0] + w21[0]); b21[4] = 0.5f * (w01[0] - w11[0] + w21[0]); b31[4] = w21[0];
			b02[4] = w02[0]; b12[4] = 0.5f * (w02[0] + w12[0] + w22[0]); b22[4] = 0.5f * (w02[0] - w12[0] + w22[0]); b32[4] = w22[0];

			b00[5] = w00[1]; b10[5] = 0.5f * (w00[1] + w10[1] + w20[1]); b20[5] = 0.5f * (w00[1] - w10[1] + w20[1]); b30[5] = w20[1];//{oc2, ic1}
			b01[5] = w01[1]; b11[5] = 0.5f * (w01[1] + w11[1] + w21[1]); b21[5] = 0.5f * (w01[1] - w11[1] + w21[1]); b31[5] = w21[1];
			b02[5] = w02[1]; b12[5] = 0.5f * (w02[1] + w12[1] + w22[1]); b22[5] = 0.5f * (w02[1] - w12[1] + w22[1]); b32[5] = w22[1];

			//====={ oc3, (ic0, ic1) }=============================================================================================
			const int Wd00 = (oc3 * 9) * IC + ic0, Wd01 = Wd00 + IC, Wd02 = Wd00 + (IC << 1);//oc1, {ic0, ic1}
			const int Wd10 = Wd00 + (IC * 3)     , Wd11 = Wd10 + IC, Wd12 = Wd10 + (IC << 1);
			const int Wd20 = Wd00 + (IC * 6)     , Wd21 = Wd20 + IC, Wd22 = Wd20 + (IC << 1);
			*(float2*)(w00) = *(float2*)(W + Wd00); *(float2*)(w01) = *(float2*)(W + Wd01); *(float2*)(w02) = *(float2*)(W + Wd02);
			*(float2*)(w10) = *(float2*)(W + Wd10); *(float2*)(w11) = *(float2*)(W + Wd11); *(float2*)(w12) = *(float2*)(W + Wd12);
			*(float2*)(w20) = *(float2*)(W + Wd20); *(float2*)(w21) = *(float2*)(W + Wd21); *(float2*)(w22) = *(float2*)(W + Wd22);

			b00[6] = w00[0]; b10[6] = 0.5f * (w00[0] + w10[0] + w20[0]); b20[6] = 0.5f * (w00[0] - w10[0] + w20[0]); b30[6] = w20[0];//{oc3, ic0}
			b01[6] = w01[0]; b11[6] = 0.5f * (w01[0] + w11[0] + w21[0]); b21[6] = 0.5f * (w01[0] - w11[0] + w21[0]); b31[6] = w21[0];
			b02[6] = w02[0]; b12[6] = 0.5f * (w02[0] + w12[0] + w22[0]); b22[6] = 0.5f * (w02[0] - w12[0] + w22[0]); b32[6] = w22[0];

			b00[7] = w00[1]; b10[7] = 0.5f * (w00[1] + w10[1] + w20[1]); b20[7] = 0.5f * (w00[1] - w10[1] + w20[1]); b30[7] = w20[1];//{oc3, ic1}
			b01[7] = w01[1]; b11[7] = 0.5f * (w01[1] + w11[1] + w21[1]); b21[7] = 0.5f * (w01[1] - w11[1] + w21[1]); b31[7] = w21[1];
			b02[7] = w02[1]; b12[7] = 0.5f * (w02[1] + w12[1] + w22[1]); b22[7] = 0.5f * (w02[1] - w12[1] + w22[1]); b32[7] = w22[1];
		}

		//======={ write (4*4) * (2*3) elements to G[IC, 4, 4, OC] }==============================================================
		float g00[4], g01[4], g02[4], g03[4];//(4 * 4) elements
		float g10[4], g11[4], g12[4], g13[4];
		float g20[4], g21[4], g22[4], g23[4];
		float g30[4], g31[4], g32[4], g33[4];
		//G[IC, 4, 4, OC]: ic0, group1
		{
			const int G00 = (ic0 << 4) * OC + oc0, G01 = G00 + OC, G02 = G00 + (OC << 1), G03 = G00 + OC * 3;//{oc0, oc1}
			g00[0] = b00[0]; g00[1] = b00[2]; g00[2] = b00[4]; g00[3] = b00[6]; *(float4*)(G + G00) = *(float4*)(g00);
			g01[0] = 0.5f * (b00[0] + b01[0] + b02[0]); g01[1] = 0.5f * (b00[2] + b01[2] + b02[2]);
			g01[2] = 0.5f * (b00[4] + b01[4] + b02[4]); g01[3] = 0.5f * (b00[6] + b01[6] + b02[6]); *(float4*)(G + G01) = *(float4*)(g01);
			g02[0] = 0.5f * (b00[0] - b01[0] + b02[0]); g02[1] = 0.5f * (b00[2] - b01[2] + b02[2]);
			g02[2] = 0.5f * (b00[4] - b01[4] + b02[4]); g02[3] = 0.5f * (b00[6] - b01[6] + b02[6]); *(float4*)(G + G02) = *(float4*)(g02);
			g03[0] = b02[0]; g03[1] = b02[2]; g03[2] = b02[4]; g03[3] = b02[6]; *(float4*)(G + G03) = *(float4*)(g03);

			const int G10 = G00 + (OC << 2), G11 = G10 + OC, G12 = G10 + (OC << 1), G13 = G10 + OC * 3;
			g10[0] = b10[0]; g10[1] = b10[2]; g10[2] = b10[4]; g10[3] = b10[6]; *(float4*)(G + G10) = *(float4*)(g10);
			g11[0] = 0.5f * (b10[0] + b11[0] + b12[0]); g11[1] = 0.5f * (b10[2] + b11[2] + b12[2]);
			g11[2] = 0.5f * (b10[4] + b11[4] + b12[4]); g11[3] = 0.5f * (b10[6] + b11[6] + b12[6]); *(float4*)(G + G11) = *(float4*)(g11);
			g12[0] = 0.5f * (b10[0] - b11[0] + b12[0]); g12[1] = 0.5f * (b10[2] - b11[2] + b12[2]);
			g12[2] = 0.5f * (b10[4] - b11[4] + b12[4]); g12[3] = 0.5f * (b10[6] - b11[6] + b12[6]); *(float4*)(G + G12) = *(float4*)(g12);
			g13[0] = b12[0]; g13[1] = b12[2]; g13[2] = b12[4]; g13[3] = b12[6]; *(float4*)(G + G13) = *(float4*)(g13);

			const int G20 = G10 + (OC << 2), G21 = G20 + OC, G22 = G20 + (OC << 1), G23 = G20 + OC * 3;
			g20[0] = b20[0]; g20[1] = b20[2]; g20[2] = b20[4]; g20[3] = b20[6]; *(float4*)(G + G20) = *(float4*)(g20);
			g21[0] = 0.5f * (b20[0] + b21[0] + b22[0]); g21[1] = 0.5f * (b20[2] + b21[2] + b22[2]);
			g21[2] = 0.5f * (b20[4] + b21[4] + b22[4]); g21[3] = 0.5f * (b20[6] + b21[6] + b22[6]); *(float4*)(G + G21) = *(float4*)(g21);
			g22[0] = 0.5f * (b20[0] - b21[0] + b22[0]); g22[1] = 0.5f * (b20[2] - b21[2] + b22[2]);
			g22[2] = 0.5f * (b20[4] - b21[4] + b22[4]); g22[3] = 0.5f * (b20[6] - b21[6] + b22[6]); *(float4*)(G + G22) = *(float4*)(g22);
			g23[0] = b22[0]; g23[1] = b22[2]; g23[2] = b22[4]; g23[3] = b22[6]; *(float4*)(G + G23) = *(float4*)(g23);

			const int G30 = G20 + (OC << 2), G31 = G30 + OC, G32 = G30 + (OC << 1), G33 = G30 + OC * 3;
			g30[0] = b30[0]; g30[1] = b30[2]; g30[2] = b30[4]; g30[3] = b30[6]; *(float4*)(G + G30) = *(float4*)(g30);
		    g31[0] = 0.5f * (b30[0] + b31[0] + b32[0]); g31[1] = 0.5f * (b30[2] + b31[2] + b32[2]);
			g31[2] = 0.5f * (b30[4] + b31[4] + b32[4]); g31[3] = 0.5f * (b30[6] + b31[6] + b32[6]); *(float4*)(G + G31) = *(float4*)(g31);
			g32[0] = 0.5f * (b30[0] - b31[0] + b32[0]); g32[1] = 0.5f * (b30[2] - b31[2] + b32[2]);
			g32[2] = 0.5f * (b30[4] - b31[4] + b32[4]); g32[3] = 0.5f * (b30[6] - b31[6] + b32[6]); *(float4*)(G + G32) = *(float4*)(g32);
			g33[0] = b32[0]; g33[1] = b32[2]; g33[2] = b32[4]; g33[3] = b32[6]; *(float4*)(G + G33) = *(float4*)(g33);
		}

		//G[IC, 4, 4, OC]: ic1, groupg2
		{
			const int G00 = (ic1 << 4) * OC + oc0, G01 = G00 + OC, G02 = G00 + (OC << 1), G03 = G00 + OC * 3;//{ }
			g00[0] = b00[1]; g00[1] = b00[3]; g00[2] = b00[5]; g00[3] = b00[7]; *(float4*)(G + G00) = *(float4*)(g00);
			g01[0] = 0.5f * (b00[1] + b01[1] + b02[1]); g01[1] = 0.5f * (b00[3] + b01[3] + b02[3]);
			g01[2] = 0.5f * (b00[5] + b01[5] + b02[5]); g01[3] = 0.5f * (b00[7] + b01[7] + b02[7]); *(float4*)(G + G01) = *(float4*)(g01);
			g02[0] = 0.5f * (b00[1] - b01[1] + b02[1]); g02[1] = 0.5f * (b00[3] - b01[3] + b02[3]);
			g02[2] = 0.5f * (b00[5] - b01[5] + b02[5]); g02[3] = 0.5f * (b00[7] - b01[7] + b02[7]); *(float4*)(G + G02) = *(float4*)(g02);
			g03[0] = b02[1]; g03[1] = b02[3]; g03[2] = b02[5]; g03[3] = b02[7]; *(float4*)(G + G03) = *(float4*)(g03);

			const int G10 = G00 + (OC << 2), G11 = G10 + OC, G12 = G10 + (OC << 1), G13 = G10 + OC * 3;
			g10[0] = b10[1]; g10[1] = b10[3]; g10[2] = b10[5]; g10[3] = b10[7]; *(float4*)(G + G10) = *(float4*)(g10);
			g11[0] = 0.5f * (b10[1] + b11[1] + b12[1]); g11[1] = 0.5f * (b10[3] + b11[3] + b12[3]);
			g11[2] = 0.5f * (b10[5] + b11[5] + b12[5]); g11[3] = 0.5f * (b10[7] + b11[7] + b12[7]); *(float4*)(G + G11) = *(float4*)(g11);
			g12[0] = 0.5f * (b10[1] - b11[1] + b12[1]); g12[1] = 0.5f * (b10[3] - b11[3] + b12[3]);
			g12[2] = 0.5f * (b10[5] - b11[5] + b12[5]); g12[3] = 0.5f * (b10[7] - b11[7] + b12[7]); *(float4*)(G + G12) = *(float4*)(g12);
			g13[0] = b12[1]; g13[1] = b12[3]; g13[2] = b12[5]; g13[3] = b12[7]; *(float4*)(G + G13) = *(float4*)(g13);

			const int G20 = G10 + (OC << 2), G21 = G20 + OC, G22 = G20 + (OC << 1), G23 = G20 + OC * 3;
			g20[0] = b20[1]; g20[1] = b20[3]; g20[2] = b20[5]; g20[3] = b20[7]; *(float4*)(G + G20) = *(float4*)(g20);
			g21[0] = 0.5f * (b20[1] + b21[1] + b22[1]); g21[1] = 0.5f * (b20[3] + b21[3] + b22[3]);
			g21[2] = 0.5f * (b20[5] + b21[5] + b22[5]); g21[3] = 0.5f * (b20[7] + b21[7] + b22[7]); *(float4*)(G + G21) = *(float4*)(g21);
			g22[0] = 0.5f * (b20[1] - b21[1] + b22[1]); g22[1] = 0.5f * (b20[3] - b21[3] + b22[3]);
			g22[2] = 0.5f * (b20[5] - b21[5] + b22[5]); g22[3] = 0.5f * (b20[7] - b21[7] + b22[7]); *(float4*)(G + G22) = *(float4*)(g22);
			g23[0] = b22[1]; g23[1] = b22[3]; g23[2] = b22[5]; g23[3] = b22[7]; *(float4*)(G + G23) = *(float4*)(g23);
			
			const int G30 = G20 + (OC << 2), G31 = G30 + OC, G32 = G30 + (OC << 1), G33 = G30 + OC * 3;
			g30[0] = b30[1]; g30[1] = b30[3]; g30[2] = b30[5]; g30[3] = b30[7]; *(float4*)(G + G30) = *(float4*)(g30);
			g31[0] = 0.5f * (b30[1] + b31[1] + b32[1]); g31[1] = 0.5f * (b30[3] + b31[3] + b32[3]);
			g31[2] = 0.5f * (b30[5] + b31[5] + b32[5]); g31[3] = 0.5f * (b30[7] + b31[7] + b32[7]); *(float4*)(G + G31) = *(float4*)(g31);
			g32[0] = 0.5f * (b30[1] - b31[1] + b32[1]); g32[1] = 0.5f * (b30[3] - b31[3] + b32[3]);
			g32[2] = 0.5f * (b30[5] - b31[5] + b32[5]); g32[3] = 0.5f * (b30[7] - b31[7] + b32[7]); *(float4*)(G + G32) = *(float4*)(g32);
			g33[0] = b32[1]; g33[1] = b32[3]; g33[2] = b32[5]; g33[3] = b32[7]; *(float4*)(G + G33) = *(float4*)(g33);
		}
	}
}

#endif


//======[Integration]==================================================
#ifndef CONV_3D_WINOGRAD_2D_F22X33_KERNEL_REMODE_V2_FUNCTION
#define CONV_3D_WINOGRAD_2D_F22X33_KERNEL_REMODE_V2_FUNCTION

//OC % 4 == 0, IC % 4 == 0
void __conv3D_winograd2D_f22x33_kernel_remode_v2(cudaStream_t stream,
	const float* W, float *G,
	int OC, int IC)
{
	int lengthv = OC * IC;
	if (lengthv <   256) { conv3D_winograd2d_f22x33_kremode_v2_k1_small(stream, W, G, lengthv, IC, OC); return; }//small
	if (lengthv <  1024) { conv3D_winograd2d_f22x33_kremode_v2_k1(stream, 5, 0, W, G, lengthv, IC, OC); return; }//32 * 1 = 32
	if (lengthv <  4096) { conv3D_winograd2d_f22x33_kremode_v2_k1(stream, 5, 1, W, G, lengthv, IC, OC); return; }//32 * 2 = 64
	if (lengthv <  8192) { conv3D_winograd2d_f22x33_kremode_v2_k2x2(stream, 5, 0, W, G, IC, OC); return; }//32 * 4 = 128

	if (IC > 15 && OC > 31) { conv3D_winograd2d_f22x33_kremode_v2_k2x4A(stream, 2, 3, 2, 1, W, G, IC, OC); return; } //5, 3 (32, 8).32 * 8 = 256
	if (lengthv < 16384) { conv3D_winograd2d_f22x33_kremode_v2_k2x4(stream, 5, 0, W, G, IC, OC); return; }//32 * 8 = 256
	conv3D_winograd2d_f22x33_kremode_v2_k2x4(stream, 5, 1, W, G, IC, OC); //32 * 16 = 512
}

#endif

#endif
